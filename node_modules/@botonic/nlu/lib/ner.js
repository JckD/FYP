(function (global, factory) {
  if (typeof define === "function" && define.amd) {
    define(["exports", "compromise", "compromise-plugin", "./constants"], factory);
  } else if (typeof exports !== "undefined") {
    factory(exports, require("compromise"), require("compromise-plugin"), require("./constants"));
  } else {
    var mod = {
      exports: {}
    };
    factory(mod.exports, global.compromise, global.compromisePlugin, global.constants);
    global.ner = mod.exports;
  }
})(this, function (_exports, _compromise, _compromisePlugin, _constants) {
  "use strict";

  var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.getEntities = getEntities;
  _compromise = _interopRequireDefault(_compromise);
  _compromisePlugin = _interopRequireDefault(_compromisePlugin);

  function listContainsEntity(entity, list) {
    var _iteratorNormalCompletion = true;
    var _didIteratorError = false;
    var _iteratorError = undefined;

    try {
      for (var _iterator = list[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
        var item = _step.value;

        if (entity.type == item.type && entity.value == item.value) {
          return true;
        }
      }
    } catch (err) {
      _didIteratorError = true;
      _iteratorError = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion && _iterator["return"] != null) {
          _iterator["return"]();
        }
      } finally {
        if (_didIteratorError) {
          throw _iteratorError;
        }
      }
    }

    return false;
  }

  function getEntities(input, devEntities) {
    var entities = {};
    var taggedEntities = [];

    var tagList = _constants.DEFAULT_ENTITIES.concat(devEntities.tagList);

    _compromise["default"].plugin(_compromisePlugin["default"].pack({
      words: devEntities.words,
      tags: devEntities.tags
    }));

    var processedInput = (0, _compromise["default"])(input);
    entities.places = processedInput.places().out('array');
    entities.organizations = processedInput.organizations().out('array');
    entities.people = processedInput.people().out('array');
    entities.dates = processedInput.dates().out('array');
    entities.values = processedInput.values().out('array');
    var _iteratorNormalCompletion2 = true;
    var _didIteratorError2 = false;
    var _iteratorError2 = undefined;

    try {
      for (var _iterator2 = tagList[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
        var tag = _step2.value;
        var _iteratorNormalCompletion3 = true;
        var _didIteratorError3 = false;
        var _iteratorError3 = undefined;

        try {
          for (var _iterator3 = processedInput.out('tags')[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
            var taggedToken = _step3.value;

            if (taggedToken.tags.includes(tag)) {
              var entity = {
                value: taggedToken.text,
                tags: taggedToken.tags
              };

              if (!listContainsEntity(entity, taggedEntities)) {
                taggedEntities.push(entity);
              }
            }
          }
        } catch (err) {
          _didIteratorError3 = true;
          _iteratorError3 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion3 && _iterator3["return"] != null) {
              _iterator3["return"]();
            }
          } finally {
            if (_didIteratorError3) {
              throw _iteratorError3;
            }
          }
        }
      }
    } catch (err) {
      _didIteratorError2 = true;
      _iteratorError2 = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion2 && _iterator2["return"] != null) {
          _iterator2["return"]();
        }
      } finally {
        if (_didIteratorError2) {
          throw _iteratorError2;
        }
      }
    }

    entities.tags = taggedEntities;
    return entities;
  }
});