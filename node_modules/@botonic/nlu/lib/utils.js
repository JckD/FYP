(function (global, factory) {
  if (typeof define === "function" && define.amd) {
    define(["exports"], factory);
  } else if (typeof exports !== "undefined") {
    factory(exports);
  } else {
    var mod = {
      exports: {}
    };
    factory(mod.exports);
    global.utils = mod.exports;
  }
})(this, function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.replaceAll = replaceAll;
  _exports.shuffle = shuffle;
  _exports.clone = clone;
  _exports.printPrettyConfig = printPrettyConfig;

  function escapeRegExp(str) {
    return str.replace(/([.*+?^=!:${}()|\[\]\/\\])/g, '\\$1');
  }

  function replaceAll(str, find, replace) {
    return str.replace(new RegExp(escapeRegExp(find), 'g'), replace);
  }

  function shuffle(obj1, obj2) {
    // shuffle 2 arrays with same length preserving their relative indices
    // Fisher-Yates Shuffle: https://stackoverflow.com/a/2450976/145289
    var idx = obj1.length;
    var rnd = undefined;

    while (idx) {
      rnd = Math.floor(Math.random() * idx);
      idx -= 1;
      var _ref = [obj1[rnd], obj1[idx]];
      obj1[idx] = _ref[0];
      obj1[rnd] = _ref[1];
      var _ref2 = [obj2[rnd], obj2[idx]];
      obj2[idx] = _ref2[0];
      obj2[rnd] = _ref2[1];
    }
  }

  function clone(src) {
    return Object.assign([], src);
  }

  function printPrettyConfig(params) {
    console.log('\n\n*******************************************');
    console.log("\n\nTRAINING MODEL FOR ".concat(params.language));
    console.log('\nRUNNING WITH CONFIGURATION:');
    var maxKeyLength = 0;

    for (var key in params) {
      if (key.length > maxKeyLength) {
        maxKeyLength = key.length;
      }
    }

    for (var _key in params) {
      var param = _key + Array(maxKeyLength + 1 - _key.length).join(' ');

      console.log("   ".concat(param, " = ").concat(params[_key]));
    }

    console.log('\n');
    console.log('*******************************************');
  }
});