{"version":3,"sources":["../src/hubtype-service.js"],"names":["PUSHER_KEY","process","env","WEBCHAT_PUSHER_KEY","HUBTYPE_API_URL","HubtypeService","appId","user","lastMessageId","onEvent","id","init","pusher","Pusher","cluster","authEndpoint","forceTLS","auth","headers","channel","subscribe","pusherChannel","connectionPromise","Promise","resolve","reject","cleanAndReject","msg","clearTimeout","connectTimeout","connection","unbind","setTimeout","bind","error","data","code","message","onPusherEvent","event","isError","errorMessage","String","axios","post","sender"],"mappings":"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","sourcesContent":["import Pusher from 'pusher-js'\nimport axios from 'axios'\n\nconst PUSHER_KEY = process.env.WEBCHAT_PUSHER_KEY || '434ca667c8e6cb3f641c'\nconst HUBTYPE_API_URL = process.env.HUBTYPE_API_URL || 'https://api.hubtype.com'\n\nexport class HubtypeService {\n  constructor({ appId, user, lastMessageId, onEvent }) {\n    this.appId = appId\n    this.user = user || {}\n    this.lastMessageId = lastMessageId\n    this.onEvent = onEvent\n    if (user.id && lastMessageId) this.init()\n  }\n\n  init(user, lastMessageId) {\n    if (user) this.user = user\n    if (lastMessageId) this.lastMessageId = lastMessageId\n    if (this.pusher || !this.user.id || !this.appId) return\n    this.pusher = new Pusher(PUSHER_KEY, {\n      cluster: 'eu',\n      authEndpoint: `${HUBTYPE_API_URL}/v1/provider_accounts/webhooks/webchat/${this.appId}/auth/`,\n      forceTLS: true,\n      auth: {\n        headers: {\n          'X-BOTONIC-USER-ID': this.user.id,\n          'X-BOTONIC-LAST-MESSAGE-ID': this.lastMessageId\n        }\n      }\n    })\n    this.channel = this.pusher.subscribe(this.pusherChannel)\n    let connectionPromise = new Promise((resolve, reject) => {\n      let cleanAndReject = msg => {\n        clearTimeout(connectTimeout)\n        this.pusher.connection.unbind()\n        this.channel.unbind()\n        reject(msg)\n      }\n      let connectTimeout = setTimeout(\n        () => cleanAndReject('Connection Timeout'),\n        10000\n      )\n      this.channel.bind('pusher:subscription_succeeded', () => {\n        clearTimeout(connectTimeout)\n        resolve()\n      })\n      this.pusher.connection.bind('error', error => {\n        cleanAndReject(\n          `Pusher error (${error.error.data.code || error.data.message})`\n        )\n      })\n    })\n    this.channel.bind('botonic_response', data => this.onPusherEvent(data))\n    return connectionPromise\n  }\n\n  onPusherEvent(event) {\n    if (this.onEvent && typeof this.onEvent === 'function') this.onEvent(event)\n  }\n\n  get pusherChannel() {\n    return `private-encrypted-${this.appId}-${this.user.id}`\n  }\n\n  async postMessage(user, message) {\n    try {\n      await this.init(user)\n    } catch (e) {\n      this.onEvent({ isError: true, errorMessage: String(e) })\n      return\n    }\n    return axios.post(\n      `${HUBTYPE_API_URL}/v1/provider_accounts/webhooks/webchat/${this.appId}/`,\n      {\n        sender: this.user,\n        message: message\n      }\n    )\n  }\n}\n"],"file":"hubtype-service.js"}