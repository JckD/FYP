"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getNLU = getNLU;

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _axios = _interopRequireDefault(require("axios"));

//import { AssistantV1 } from 'watson-developer-cloud/assistant/v1'
function getNLU(_x, _x2) {
  return _getNLU.apply(this, arguments);
}

function _getNLU() {
  _getNLU = (0, _asyncToGenerator2["default"])(
  /*#__PURE__*/
  _regenerator["default"].mark(function _callee(input, integrations) {
    var df_session_id, intent, confidence, intents, entities, dialogflow_resp, luis, luis_resp;
    return _regenerator["default"].wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            df_session_id = Math.random();
            intent = null;
            confidence = 0;
            intents = [];
            entities = [];

            if (integrations) {
              _context.next = 7;
              break;
            }

            return _context.abrupt("return", {
              intent: intent,
              confidence: confidence,
              intents: intents,
              entities: entities
            });

          case 7:
            if (!integrations.dialogflow) {
              _context.next = 19;
              break;
            }

            _context.prev = 8;
            _context.next = 11;
            return (0, _axios["default"])({
              headers: {
                Authorization: 'Bearer ' + integrations.dialogflow.token
              },
              url: 'https://api.dialogflow.com/v1/query',
              params: {
                query: input.data,
                lang: 'en',
                sessionId: df_session_id
              }
            });

          case 11:
            dialogflow_resp = _context.sent;

            if (dialogflow_resp && dialogflow_resp.data) {
              intent = dialogflow_resp.data.result.metadata.intentName;
              entities = dialogflow_resp.data.result.parameters;
            }

            _context.next = 17;
            break;

          case 15:
            _context.prev = 15;
            _context.t0 = _context["catch"](8);

          case 17:
            _context.next = 33;
            break;

          case 19:
            if (!integrations.watson) {
              _context.next = 22;
              break;
            }

            _context.next = 33;
            break;

          case 22:
            if (!integrations.luis) {
              _context.next = 33;
              break;
            }

            luis = integrations.luis;
            _context.prev = 24;
            _context.next = 27;
            return (0, _axios["default"])({
              url: "https://".concat(luis.region, ".api.cognitive.microsoft.com/luis/v2.0/apps/").concat(luis.appID),
              params: {
                'subscription-key': luis.endpointKey,
                q: input.data,
                verbose: true
              }
            });

          case 27:
            luis_resp = _context.sent;

            if (luis_resp && luis_resp.data) {
              intent = luis_resp.data.topScoringIntent.intent;
              confidence = luis_resp.data.topScoringIntent.score;
              intents = luis_resp.data.intents;
              entities = luis_resp.data.entities;
            }

            _context.next = 33;
            break;

          case 31:
            _context.prev = 31;
            _context.t1 = _context["catch"](24);

          case 33:
            return _context.abrupt("return", {
              intent: intent,
              confidence: confidence,
              intents: intents,
              entities: entities
            });

          case 34:
          case "end":
            return _context.stop();
        }
      }
    }, _callee, null, [[8, 15], [24, 31]]);
  }));
  return _getNLU.apply(this, arguments);
}
//# sourceMappingURL=nlu.js.map