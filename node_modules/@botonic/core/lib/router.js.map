{"version":3,"sources":["../src/router.js"],"names":["Router","routes","input","session","lastRoutePath","routeParams","path_params","payload","split","length","path","e","brokenFlow","lastRoute","getRouteByPath","childRoutes","getRoute","Object","keys","Boolean","searchParams","URLSearchParams","url","key","value","params","defaultAction","route","ignoreRetry","__retries","retry","action","retryAction","redirect","redirectRoute","notFound","find","r","entries","filter","some","match","matchRoute","groups","routeList","currentPath","childPath","join","prop","matcher","indexOf","type","data","RegExp","exec"],"mappings":"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","sourcesContent":["import * as url from 'url'\nimport { isBrowser, isNode } from './utils'\n\nexport class Router {\n  constructor(routes) {\n    this.routes = routes\n  }\n\n  processInput(input, session = {}, lastRoutePath = null) {\n    let routeParams = {}\n    let path_params\n    try {\n      path_params = input.payload.split('__PATH_PAYLOAD__')[1].split('?')\n      if (path_params.length > 0) input.path = path_params[0]\n    } catch (e) {}\n    let brokenFlow = false\n    let lastRoute = this.getRouteByPath(lastRoutePath, this.routes)\n    if (lastRoute && lastRoute.childRoutes)\n      //get route depending of current ChildRoute\n      routeParams = this.getRoute(input, lastRoute.childRoutes)\n    if (!routeParams || !Object.keys(routeParams).length) {\n      /*\n          we couldn't find a route in the state of the lastRoute, so let's find in\n          the general conf.route\n        */\n      brokenFlow = Boolean(lastRoutePath)\n      routeParams = this.getRoute(input, this.routes, session)\n    }\n    try {\n      if (path_params.length > 1) {\n        let searchParams = ''\n        if (isBrowser()) searchParams = new URLSearchParams(path_params[1])\n        if (isNode()) searchParams = new url.URLSearchParams(path_params[1])\n        for (let [key, value] of searchParams) {\n          routeParams.params\n            ? (routeParams.params[key] = value)\n            : (routeParams.params = { [key]: value })\n        }\n      }\n    } catch (e) {}\n    if (routeParams && Object.keys(routeParams).length) {\n      //get in childRoute if one has path ''\n      let defaultAction\n      if (\n        !routeParams.route.path &&\n        routeParams.route &&\n        routeParams.route.childRoutes &&\n        routeParams.route.childRoutes.length\n      ) {\n        defaultAction = this.getRoute(\n          { path: '' },\n          routeParams.route.childRoutes\n        )\n      }\n      if ('action' in routeParams.route) {\n        if (\n          brokenFlow &&\n          routeParams.route.ignoreRetry != true &&\n          lastRoute &&\n          session.__retries < lastRoute.retry &&\n          routeParams.route.path != lastRoute.action\n        ) {\n          session.__retries = session.__retries ? session.__retries + 1 : 1\n          // The flow was broken, but we want to recover it\n          return {\n            action: routeParams.route.action,\n            params: routeParams.params,\n            retryAction: lastRoute ? lastRoute.action : null,\n            defaultAction: defaultAction ? defaultAction.route.action : null,\n            lastRoutePath: lastRoutePath\n          }\n        } else {\n          session.__retries = 0\n          if (lastRoutePath && !brokenFlow)\n            lastRoutePath = `${lastRoutePath}/${routeParams.route.path}`\n          else lastRoutePath = routeParams.route.path\n          return {\n            action: routeParams.route.action,\n            params: routeParams.params,\n            retryAction: null,\n            defaultAction: defaultAction ? defaultAction.route.action : null,\n            lastRoutePath: lastRoutePath\n          }\n        }\n      } else if (defaultAction) {\n        return {\n          action: defaultAction.route.action,\n          params: defaultAction.params,\n          lastRoutePath: lastRoutePath\n        }\n      } else if ('redirect' in routeParams.route) {\n        lastRoutePath = routeParams.route.redirect\n        let redirectRoute = this.getRouteByPath(lastRoutePath, this.routes)\n        if (redirectRoute) {\n          return {\n            action: redirectRoute.action,\n            params: redirectRoute.params,\n            lastRoutePath: lastRoutePath\n          }\n        }\n      }\n    }\n    let notFound = this.getRouteByPath('404', this.routes)\n    if (lastRoute && session.__retries < lastRoute.retry) {\n      session.__retries = session.__retries ? session.__retries + 1 : 1\n      return {\n        action: notFound.action,\n        params: {},\n        retryAction: lastRoute.action,\n        lastRoutePath: lastRoutePath\n      }\n    } else {\n      this.lastRoutePath = null\n      session.__retries = 0\n      return {\n        action: notFound.action,\n        params: {},\n        retryAction: null,\n        lastRoutePath: lastRoutePath\n      }\n    }\n  }\n\n  getRoute(input, routes, session) {\n    /* Find the route that matches the given input, if it match with some of the entries,\n      return the whole Route of the entry with optional params captured if matcher was a regex */\n    let params = {}\n    let route = routes.find(r =>\n      Object.entries(r)\n        .filter(([key, {}]) => key != 'action' && key != 'childRoutes')\n        .some(([key, value]) => {\n          let match = this.matchRoute(key, value, input, session)\n          try {\n            params = match.groups\n          } catch (e) {}\n          return Boolean(match)\n        })\n    )\n    if (route) {\n      return { route, params }\n    }\n    return null\n  }\n\n  getRouteByPath(path, routeList) {\n    if (!path) return null\n    let route = null\n    routeList = routeList || this.routes\n    let [currentPath, ...childPath] = path.split('/')\n    for (let r of routeList) {\n      //iterate over all routeList\n      if (r.path == currentPath) {\n        route = r\n        if (r.childRoutes && r.childRoutes.length && childPath.length > 0) {\n          //evaluate childroute over next actions\n          route = this.getRouteByPath(childPath.join('/'), r.childRoutes)\n          if (route) return route\n        } else if (childPath.length == 0) return route //last action and found route\n      }\n    }\n    return null\n  }\n\n  matchRoute(prop, matcher, input, session) {\n    /*\n        prop: ('text' | 'payload' | 'intent' | 'type' | 'input' | 'session' |...)\n        matcher: (string: exact match | regex: regular expression match | function: return true)\n        input: user input object, ex: {type: 'text', data: 'Hi'}\n      */\n    let value = ''\n    if (Object.keys(input).indexOf(prop) > -1) value = input[prop]\n    if (prop == 'text') {\n      if (input.type == 'text') value = input.data\n    } else if (prop == 'input') value = input\n    else if (prop == 'session') value = session\n    if (typeof matcher === 'string') return value == matcher\n    if (matcher instanceof RegExp) return matcher.exec(value)\n    if (typeof matcher === 'function') return matcher(value)\n    return false\n  }\n}\n"],"file":"router.js"}