{"version":3,"sources":["../src/router.test.js"],"names":["require","Router","textInput","type","data","textInputComplex","textPayloadInput","payload","postbackInput","describe","test","router","expect","processInput","toThrow","TypeError","path","action","toBe","matchRoute","toBeTruthy","toBeFalsy","v","startsWith","i","externalRoutes","childRoutes","getRouteByPath","toBeNull","intent","input","session","lastRoutePath"],"mappings":"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","sourcesContent":["const { Router } = require('./router')\n\nconst textInput = { type: 'text', data: 'hi' }\nconst textInputComplex = { type: 'text', data: 'Cömplêx input &% 🚀' }\nconst textPayloadInput = { type: 'text', data: 'hi', payload: 'foo' }\nconst postbackInput = { type: 'postback', payload: 'foo' }\n\ndescribe('Bad router initialization', () => {\n  test('empty routes throw TypeError', () => {\n    let router = new Router([])\n    expect(() => router.processInput(textInput)).toThrow(TypeError)\n  })\n  test('null routes throw TypeError', () => {\n    let router = new Router()\n    expect(() => router.processInput(textInput)).toThrow(TypeError)\n  })\n})\n\ntest('Router returns 404', () => {\n  let router = new Router([{ path: '404', action: '404Action' }])\n  let { action } = router.processInput(textInput)\n  expect(action).toBe('404Action')\n})\n\ndescribe('Match route by MATCHER <> INPUT', () => {\n  let router = new Router()\n  test('text <> text', () => {\n    expect(router.matchRoute('text', 'hi', textInput)).toBeTruthy()\n    expect(router.matchRoute('text', 'hii', textInput)).toBeFalsy()\n    expect(router.matchRoute('text', 'bye', textInput)).toBeFalsy()\n    expect(router.matchRoute('text', '', textInput)).toBeFalsy()\n    expect(router.matchRoute('text', null, textInput)).toBeFalsy()\n    expect(\n      router.matchRoute('text', 'Cömplêx input &% 🚀', textInputComplex)\n    ).toBeTruthy()\n    expect(\n      router.matchRoute('text', ' Cömplêx input &% 🚀', textInputComplex)\n    ).toBeFalsy() // has a space at the beginning\n  })\n  test('regex <> text', () => {\n    expect(router.matchRoute('text', /hi/, textInput)).toBeTruthy()\n    expect(router.matchRoute('text', /bye/, textInput)).toBeFalsy()\n    expect(router.matchRoute('text', /🚀/, textInputComplex)).toBeTruthy()\n    expect(router.matchRoute('text', /complex/, textInputComplex)).toBeFalsy()\n  })\n  test('function <> text', () => {\n    expect(\n      router.matchRoute('text', v => v.startsWith('hi'), textInput)\n    ).toBeTruthy()\n    expect(\n      router.matchRoute('text', v => !v.startsWith('hi'), textInput)\n    ).toBeFalsy()\n  })\n  test('input <> text', () => {\n    expect(\n      router.matchRoute('input', i => i.data.startsWith('hi'), textInput)\n    ).toBeTruthy()\n    expect(\n      router.matchRoute('input', i => !i.data.startsWith('hi'), textInput)\n    ).toBeFalsy()\n  })\n  test('text <> text payload', () => {\n    expect(router.matchRoute('payload', 'foo', textPayloadInput)).toBeTruthy()\n    expect(router.matchRoute('payload', 'fooo', textPayloadInput)).toBeFalsy()\n    expect(router.matchRoute('payload', 'bar', textPayloadInput)).toBeFalsy()\n    expect(router.matchRoute('payload', '', textPayloadInput)).toBeFalsy()\n    expect(router.matchRoute('payload', null, textPayloadInput)).toBeFalsy()\n  })\n  test('regex <> text payload', () => {\n    expect(router.matchRoute('payload', /foo/, textPayloadInput)).toBeTruthy()\n    expect(router.matchRoute('payload', /bar/, textPayloadInput)).toBeFalsy()\n  })\n  test('function <> text payload', () => {\n    expect(\n      router.matchRoute('payload', v => v.startsWith('fo'), textPayloadInput)\n    ).toBeTruthy()\n    expect(\n      router.matchRoute('payload', v => !v.startsWith('fo'), textPayloadInput)\n    ).toBeFalsy()\n  })\n  test('text <> postback', () => {\n    expect(router.matchRoute('payload', 'foo', postbackInput)).toBeTruthy()\n    expect(router.matchRoute('payload', 'fooo', postbackInput)).toBeFalsy()\n    expect(router.matchRoute('payload', 'bar', postbackInput)).toBeFalsy()\n    expect(router.matchRoute('payload', '', postbackInput)).toBeFalsy()\n    expect(router.matchRoute('payload', null, postbackInput)).toBeFalsy()\n  })\n  test('regex <> postback', () => {\n    expect(router.matchRoute('payload', /foo/, postbackInput)).toBeTruthy()\n    expect(router.matchRoute('payload', /bar/, postbackInput)).toBeFalsy()\n  })\n  test('function <> postback', () => {\n    expect(\n      router.matchRoute('payload', v => v.startsWith('fo'), postbackInput)\n    ).toBeTruthy()\n    expect(\n      router.matchRoute('payload', v => !v.startsWith('fo'), postbackInput)\n    ).toBeFalsy()\n  })\n})\n\ndescribe('Get route by path', () => {\n  const externalRoutes = [\n    { path: '', action: 'DefaultAction' },\n    { path: 'child', action: 'ChildAction' }\n  ]\n  const router = new Router([\n    { path: 'initial', action: 'Initial' },\n    {\n      path: 'flow-1',\n      action: 'Flow1',\n      childRoutes: [\n        {\n          path: '1',\n          action: 'Flow1.1',\n          childRoutes: [\n            { path: '1', action: 'Flow1.1.1' },\n            { path: '2', action: 'Flow1.1.2' },\n            { path: '3', action: 'Flow1.1.3' }\n          ]\n        },\n        { path: '2', action: 'Flow1.2', childRoutes: externalRoutes },\n        {\n          path: '3',\n          action: 'Flow1.3',\n          childRoutes: [\n            { path: '1', action: 'Flow1.3.1' },\n            { path: '2', action: 'Flow1.3.2' },\n            { path: '3', action: 'Flow1.3.3' }\n          ]\n        }\n      ]\n    },\n    { path: '404', action: '404Action' }\n  ])\n  test('path exists', () => {\n    expect(router.getRouteByPath('initial').action).toBe('Initial')\n    expect(router.getRouteByPath('flow-1/1').action).toBe('Flow1.1')\n    expect(router.getRouteByPath('flow-1/3/2').action).toBe('Flow1.3.2')\n  })\n  test('path exists in composed child routes', () => {\n    expect(router.getRouteByPath('flow-1/2').action).toBe('Flow1.2')\n    expect(router.getRouteByPath('flow-1/2/child').action).toBe('ChildAction')\n  })\n  test('path does not exist', () => {\n    expect(router.getRouteByPath('')).toBeNull()\n    expect(router.getRouteByPath('foo')).toBeNull()\n    expect(router.getRouteByPath('flow-1/3/2/6')).toBeNull()\n  })\n})\n\ndescribe('Process input (v<0.9)', () => {\n  const externalRoutes = [\n    { path: '', action: 'DefaultAction' },\n    { path: 'child', action: 'ChildAction' }\n  ]\n  const router = new Router([\n    { path: 'help', payload: 'help', action: 'Help' },\n    {\n      path: 'initial',\n      intent: /greeting/,\n      action: 'Flow1',\n      childRoutes: [\n        {\n          path: '1',\n          payload: '1',\n          action: 'Flow1.1',\n          childRoutes: [\n            { path: '1', payload: '1', action: 'Flow1.1.1' },\n            { path: '2', payload: '2', action: 'Flow1.1.2' },\n            { path: '3', payload: '3', action: 'Flow1.1.3' }\n          ]\n        },\n        {\n          path: '2',\n          payload: '2',\n          action: 'Flow1.2',\n          childRoutes: externalRoutes\n        },\n        {\n          path: '3',\n          payload: '3',\n          action: 'Flow1.3',\n          childRoutes: [\n            { path: '1', payload: '1', action: 'Flow1.3.1' },\n            { path: '2', payload: '2', action: 'Flow1.3.2' },\n            { path: '3', payload: '3', action: 'Flow1.3.3' }\n          ]\n        }\n      ]\n    },\n    { path: '404', action: '404Action' }\n  ])\n  test('text input, root level route', () => {\n    let input = { type: 'text', data: 'hi', intent: 'greeting' }\n    let session = {}\n    let lastRoutePath = null\n    expect(router.processInput(input, session, lastRoutePath).action).toBe(\n      'Flow1'\n    )\n  })\n  test('payload input, 2nd level route', () => {\n    let input = { type: 'postback', payload: '2' }\n    let session = {}\n    let lastRoutePath = 'initial'\n    expect(router.processInput(input, session, lastRoutePath).action).toBe(\n      'Flow1.2'\n    )\n  })\n  test('path payload input, root level route (should be ignored)', () => {\n    let input = { type: 'postback', payload: '__PATH_PAYLOAD__initial/2' }\n    let session = {}\n    let lastRoutePath = ''\n    expect(router.processInput(input, session, lastRoutePath).action).toBe(\n      'Flow1.2'\n    )\n  })\n  test('path payload input, 2nd level route (should be ignored)', () => {\n    let input = { type: 'postback', payload: '__PATH_PAYLOAD__initial/2' }\n    let session = {}\n    let lastRoutePath = 'initial'\n    expect(router.processInput(input, session, lastRoutePath).action).toBe(\n      'Flow1.2'\n    )\n  })\n})\n"],"file":"router.test.js"}