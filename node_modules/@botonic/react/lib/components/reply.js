"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Reply = void 0;

var _react = _interopRequireWildcard(require("react"));

var _core = require("@botonic/core");

var _contexts = require("../contexts");

var Reply = function Reply(props) {
  var _useContext = (0, _react.useContext)(_contexts.WebchatContext),
      webchatState = _useContext.webchatState,
      sendText = _useContext.sendText;

  var handleClick = function handleClick(event) {
    event.preventDefault();

    if (props.children) {
      var payload = props.payload;
      if (props.path) payload = "__PATH_PAYLOAD__".concat(props.path);
      sendText(props.children, payload);
    }
  };

  var renderBrowser = function renderBrowser() {
    if (webchatState.theme.customReply) {
      var CustomReply = webchatState.theme.customReply;
      return _react["default"].createElement("div", {
        onClick: function onClick(e) {
          return handleClick(e);
        }
      }, _react["default"].createElement(CustomReply, null, props.children));
    }

    return _react["default"].createElement("button", {
      style: {
        width: '100%',
        padding: '4px 8px',
        border: "1px solid ".concat(webchatState.theme.brandColor),
        color: webchatState.theme.brandColor,
        borderRadius: 8,
        cursor: 'pointer',
        outline: 0
      },
      onClick: function onClick(e) {
        return handleClick(e);
      }
    }, props.children);
  };

  var renderNode = function renderNode() {
    if (props.path) {
      var payload = "__PATH_PAYLOAD__".concat(props.path);
      return _react["default"].createElement("reply", {
        payload: payload
      }, props.children);
    }

    return _react["default"].createElement("reply", {
      payload: props.payload
    }, props.children);
  };

  if ((0, _core.isBrowser)()) return renderBrowser();else if ((0, _core.isNode)()) return renderNode();
};

exports.Reply = Reply;

Reply.serialize = function (replyProps) {
  var payload = replyProps.payload;
  if (replyProps.path) payload = "__PATH_PAYLOAD__".concat(replyProps.path);
  return {
    reply: {
      title: replyProps.children,
      payload: payload
    }
  };
};
//# sourceMappingURL=reply.js.map