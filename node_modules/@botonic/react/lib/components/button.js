"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Button = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _react = _interopRequireWildcard(require("react"));

var _core = require("@botonic/core");

var _contexts = require("../contexts");

var Button = function Button(props) {
  var _useContext = (0, _react.useContext)(_contexts.WebchatContext),
      webchatState = _useContext.webchatState,
      openWebview = _useContext.openWebview,
      sendPayload = _useContext.sendPayload;

  var _useState = (0, _react.useState)(false),
      _useState2 = (0, _slicedToArray2["default"])(_useState, 2),
      hover = _useState2[0],
      setHover = _useState2[1];

  var handleClick = function handleClick(event) {
    event.preventDefault();
    if (props.webview) openWebview(props.webview, props.params);else if (props.path) sendPayload("__PATH_PAYLOAD__".concat(props.path));else if (props.payload) sendPayload(props.payload);else if (props.url) {
      window.open(props.url);
    }
    if (props.onClick) props.onClick();
  };

  var renderBrowser = function renderBrowser() {
    var _ref;

    if (webchatState.theme.customButton) {
      var CustomButton = webchatState.theme.customButton;
      return _react["default"].createElement("div", {
        onClick: function onClick(e) {
          return handleClick(e);
        }
      }, _react["default"].createElement(CustomButton, null, props.children));
    }

    return _react["default"].createElement("button", {
      theme: webchatState.theme,
      onMouseEnter: function onMouseEnter() {
        return setHover(true);
      },
      onMouseLeave: function onMouseLeave() {
        return setHover(false);
      },
      onClick: function onClick(e) {
        return handleClick(e);
      },
      style: (_ref = {
        display: 'flex',
        width: '100%',
        maxHeight: 80,
        fontSize: 14,
        textAlign: 'center',
        alignContent: 'center',
        justifyContent: 'center',
        padding: '12px 32px',
        color: webchatState.theme && webchatState.theme.brandColor || '#000',
        backgroundColor: hover ? '#f3f3f3' : '#fff',
        border: 'none'
      }, (0, _defineProperty2["default"])(_ref, "border", '1px solid #f1f0f0'), (0, _defineProperty2["default"])(_ref, "cursor", 'pointer'), (0, _defineProperty2["default"])(_ref, "outline", 0), (0, _defineProperty2["default"])(_ref, "borderTopRightRadius", props.top || 0), (0, _defineProperty2["default"])(_ref, "borderTopLeftRadius", props.top || 0), (0, _defineProperty2["default"])(_ref, "borderBottomRightRadius", props.bottom || 0), (0, _defineProperty2["default"])(_ref, "borderBottomLeftRadius", props.bottom || 0), (0, _defineProperty2["default"])(_ref, "overflow", 'hidden'), _ref)
    }, props.children);
  };

  var renderNode = function renderNode() {
    if (props.webview) {
      var Webview = props.webview;
      var params = '';
      if (props.params) params = (0, _core.params2queryString)(props.params);
      return _react["default"].createElement("button", {
        url: "/webviews/".concat(Webview.name, "?").concat(params)
      }, props.children);
    } else if (props.path) {
      var payload = "__PATH_PAYLOAD__".concat(props.path);
      return _react["default"].createElement("button", {
        payload: payload
      }, props.children);
    } else if (props.payload) {
      return _react["default"].createElement("button", {
        payload: props.payload
      }, props.children);
    } else if (props.url) {
      return _react["default"].createElement("button", {
        url: props.url
      }, props.children);
    }
  };

  if ((0, _core.isBrowser)()) return renderBrowser();else if ((0, _core.isNode)()) return renderNode();
};

exports.Button = Button;

Button.serialize = function (buttonProps) {
  var payload = buttonProps.payload;
  if (buttonProps.path) payload = "__PATH_PAYLOAD__".concat(buttonProps.path);
  return {
    button: {
      payload: payload,
      url: buttonProps.url,
      webview: buttonProps.webview,
      title: buttonProps.children
    }
  };
};
//# sourceMappingURL=button.js.map