{"version":3,"sources":["../src/botonicTester.js"],"names":["BotonicInputTester","bot","inp","session","lastRoutePath","input","type","data","res","response","payload","BotonicOutputTester","out","replies","ReactDOMServer","renderToStaticMarkup","text","path","i","arguments","length","r","push","reply"],"mappings":"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","sourcesContent":["import React from 'react'\nimport ReactDOMServer from 'react-dom/server'\n//var decode = require('unescape')\nimport decode from 'unescape'\n\nimport { Text } from './components/text'\nimport { Reply } from './components/reply'\n\nexport class BotonicInputTester {\n  constructor(bot) {\n    this.bot = bot\n  }\n  async text(inp, session = {}, lastRoutePath = '') {\n    let res = await this.bot.input({\n      input: { type: 'text', data: inp },\n      session: session,\n      lastRoutePath: lastRoutePath\n    })\n    return decode(res.response)\n  }\n\n  async payload(inp, session = {}, lastRoutePath = '') {\n    let res = await this.bot.input({\n      input: { type: 'postback', payload: inp },\n      session: session,\n      lastRoutePath: lastRoutePath\n    })\n    return decode(res.response)\n  }\n\n  async path(inp, session = {}, lastRoutePath = '') {\n    let res = await this.bot.input({\n      input: { type: 'text', payload: `__PATH_PAYLOAD__${inp}` },\n      session: session,\n      lastRoutePath: lastRoutePath\n    })\n    return decode(res.response)\n  }\n}\n\nexport class BotonicOutputTester {\n  constructor(bot) {\n    this.bot = bot\n  }\n\n  text(out, replies = null) {\n    return decode(\n      ReactDOMServer.renderToStaticMarkup(\n        !replies ? (\n          <Text>{out}</Text>\n        ) : (\n          <Text>\n            {out}\n            {replies}\n          </Text>\n        )\n      )\n    )\n  }\n\n  reply({ text, payload = null, path = null }) {\n    if (payload) {\n      return decode(\n        ReactDOMServer.renderToStaticMarkup(\n          <Reply payload={payload}>{text}</Reply>\n        )\n      )\n    }\n    if (path) {\n      return decode(\n        ReactDOMServer.renderToStaticMarkup(<Reply path={path}>{text}</Reply>)\n      )\n    }\n  }\n\n  replies() {\n    let replies = []\n    for (let i = 0; i < arguments.length; i++) {\n      let r = arguments[i]\n      replies.push(\n        this.reply({ text: r.text, payload: r.payload, path: r.path })\n      )\n    }\n    return replies\n  }\n}\n"],"file":"botonicTester.js"}