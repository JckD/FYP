"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isDev = isDev;
exports.isProd = isProd;
exports.msgToBotonic = msgToBotonic;
exports.msgsToBotonic = msgsToBotonic;
exports.staticAsset = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _react = _interopRequireDefault(require("react"));

var _text = require("./components/text");

var _title = require("./components/title");

var _subtitle = require("./components/subtitle");

var _element = require("./components/element");

var _button = require("./components/button");

var _carousel = require("./components/carousel");

var _reply = require("./components/reply");

var _image = require("./components/image");

var _audio = require("./components/audio");

var _pic = require("./components/pic");

var _video = require("./components/video");

var _document = require("./components/document");

var _location = require("./components/location");

function isDev() {
  return process.env.NODE_ENV == 'development';
}

function isProd() {
  return process.env.NODE_ENV == 'production';
}

function msgToBotonic(msg, customMessageTypes) {
  delete msg.display;

  if (msg.type == 'custom') {
    try {
      return customMessageTypes.find(function (mt) {
        return mt.customTypeName == msg.data.customTypeName;
      }).deserialize(msg);
    } catch (e) {
      console.log(e);
    }
  } else if (msg.type == 'text') {
    if (msg.replies && msg.replies.length || msg.keyboard && msg.keyboard.length) return _react["default"].createElement(_text.Text, msg, msg.data.text || msg.data, quickreplies_parse(msg));
    if (msg.buttons && msg.buttons.length) return _react["default"].createElement(_text.Text, msg, msg.data.text || msg.data, buttons_parse(msg.buttons));
    return _react["default"].createElement(_text.Text, msg, msg.data.text || msg.data);
  } else if (msg.type == 'carousel') {
    var elements = msg.elements || msg.data.elements;
    return _react["default"].createElement(_carousel.Carousel, msg, elements_parse(elements));
  } else if (msg.type == 'image') {
    return _react["default"].createElement(_image.Image, (0, _extends2["default"])({}, msg, {
      src: msg.data.image || msg.data
    }));
  } else if (msg.type == 'video') {
    return _react["default"].createElement(_video.Video, (0, _extends2["default"])({}, msg, {
      src: msg.data.video || msg.data
    }));
  } else if (msg.type == 'audio') {
    return _react["default"].createElement(_audio.Audio, (0, _extends2["default"])({}, msg, {
      src: msg.data.audio || msg.data
    }));
  } else if (msg.type == 'document') {
    return _react["default"].createElement(_document.Document, (0, _extends2["default"])({}, msg, {
      src: msg.data.document || msg.data
    }));
  } else if (msg.type == 'location') {
    var lat = msg.data ? msg.data.location.lat : msg.latitude;

    var _long = msg.data ? msg.data.location["long"] : msg.longitude;

    return _react["default"].createElement(_location.Location, (0, _extends2["default"])({}, msg, {
      lat: lat,
      "long": _long
    }));
  } else if (msg.type == 'buttonmessage') {
    var buttons = buttons_parse(msg.buttons);
    return _react["default"].createElement(_react["default"].Fragment, null, _react["default"].createElement(_text.Text, msg, msg.text, buttons));
  }
}

function msgsToBotonic(msgs, customMessageTypes) {
  if (Array.isArray(msgs)) {
    return _react["default"].createElement(_react["default"].Fragment, null, msgs.map(function (msg, i) {
      if (msg['key'] == null) {
        msg['key'] = "msg".concat(i);
      }

      return msgToBotonic(msg, customMessageTypes);
    }));
  }

  return msgToBotonic(msgs, customMessageTypes);
}

function elements_parse(elements) {
  return elements.map(function (e, i) {
    return _react["default"].createElement(_element.Element, {
      key: i
    }, _react["default"].createElement(_pic.Pic, {
      src: e.img || e.pic || e.image_url
    }), _react["default"].createElement(_title.Title, null, e.title), _react["default"].createElement(_subtitle.Subtitle, null, e.subtitle), buttons_parse(e.button || e.buttons));
  });
}

function buttons_parse(buttons) {
  return buttons.map(function (b, i) {
    var props = b.props || b;
    var payload = props.payload;
    if (props.path) payload = "__PATH_PAYLOAD__".concat(props.path);
    var url = props.messenger_extensions ? null : props.url;
    var title = props.title;
    var webview = props.messenger_extensions ? props.url : null;
    return _react["default"].createElement(_button.Button, {
      key: i,
      payload: payload,
      url: url,
      webview: webview
    }, title);
  });
}

function quickreplies_parse(msg) {
  var replies = null;

  if (msg.replies) {
    replies = msg.replies.map(function (el, i) {
      var payload = el.payload;
      if (el.path) payload = "__PATH_PAYLOAD__".concat(el.path);
      return _react["default"].createElement(_reply.Reply, {
        key: i,
        payload: payload
      }, el.text);
    });
  }

  if (msg.keyboard) {
    replies = msg.keyboard.map(function (el) {
      return _react["default"].createElement(_reply.Reply, {
        payload: el.data
      }, el.label);
    });
  }

  return replies;
}

var staticAsset = function staticAsset(path) {
  var scriptBaseURL = document.querySelector('script[src$="webchat.botonic.js"]').getAttribute('src');
  var scriptName = scriptBaseURL.split('/').pop();
  var basePath = scriptBaseURL.replace('/' + scriptName, '/');
  return basePath + path;
};

exports.staticAsset = staticAsset;
//# sourceMappingURL=utils.js.map