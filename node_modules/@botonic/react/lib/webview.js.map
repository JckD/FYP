{"version":3,"sources":["../src/webview.jsx"],"names":["App","props","url","URL","window","location","href","params","Array","from","searchParams","entries","filter","key","value","reduce","o","session","JSON","parse","get","state","options","payload","path","s","base_url","_hubtype_api","method","bot","id","data","chat_id","user","resp","console","log","provider","imp_id","WebviewSdk","close","err","e","parent","postMessage","requestContext","getString","stringId","locales","__locale","closeWebview","bind","webviews","map","Webview","i","name","React","Component","WebviewApp","dest"],"mappings":"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","sourcesContent":["import axios from 'axios'\nimport React from 'react'\nimport { render } from 'react-dom'\nimport { BrowserRouter, Route } from 'react-router-dom'\n\nimport { getString } from '@botonic/core'\nimport { params2queryString } from '@botonic/core'\nimport { RequestContext } from './contexts'\n\nclass App extends React.Component {\n    constructor(props) {\n        super(props)\n        let url = new URL(window.location.href)\n        let params = Array.from(url.searchParams.entries())\n            .filter(([key, value]) => key != 'context')\n            .reduce((o, [key, value]) => {\n                o[key] = value\n                return o\n            }, {})\n        let session = JSON.parse(url.searchParams.get('context') || {})\n        this.state = { session, params }\n    }\n\n    async close(options) {\n        let payload = options ? options.payload : null\n        if (options.path) payload = `__PATH_PAYLOAD__${options.path}`\n        if (payload) {\n            if (options.params) {\n                payload = `${payload}?${params2queryString(options.params)}`\n            }\n            let s = this.state.session\n            try {\n                let base_url = s._hubtype_api || 'https://api.hubtype.com'\n                let resp = await axios({\n                    method: 'post',\n                    url: `${base_url}/v1/bots/${s.bot.id}/send_postback/`,\n                    data: { payload: payload, chat_id: s.user.id }\n                })\n            } catch (e) {\n                console.log(e)\n            }\n        }\n        if (this.state.session.user.provider === 'whatsappnew') {\n            location.href = 'https://wa.me/' + this.state.session.user.imp_id;\n        }\n        else {\n            try {\n                window.WebviewSdk.close(() => {}, err => console.log(err))\n            } catch(e){}\n            try {\n                parent.postMessage('botonicCloseWebview', '*')\n            } catch(e) {}\n        }\n    }\n\n    render() {\n        let requestContext = {\n            getString: stringId =>\n                getString(\n                    this.props.locales,\n                    this.state.session.__locale,\n                    stringId\n                ),\n            session: this.state.session || {},\n            params: this.state.params || {},\n            closeWebview: this.close.bind(this)\n        }\n\n        return (\n            <RequestContext.Provider value={requestContext}>\n                {this.props.webviews.map((Webview, i) => (\n                    <Route\n                        key={i}\n                        path={`/${Webview.name}`}\n                        component={Webview}\n                    />\n                ))}\n            </RequestContext.Provider>\n        )\n    }\n}\n\nexport class WebviewApp {\n    constructor({ webviews, locales }) {\n        this.webviews = webviews\n        this.locales = locales\n    }\n\n    render(dest) {\n        render(\n            <BrowserRouter>\n                <App webviews={this.webviews} locales={this.locales} />\n            </BrowserRouter>,\n            dest\n        )\n    }\n}\n"],"file":"webview.js"}