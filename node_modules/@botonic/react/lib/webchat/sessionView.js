"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SessionView = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireDefault(require("react"));

var _reactJsonTree = _interopRequireDefault(require("react-json-tree"));

var _hooks = require("./hooks");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { (0, _defineProperty2["default"])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

var SessionViewAttribute = function SessionViewAttribute(props) {
  return _react["default"].createElement("div", {
    style: {
      display: 'flex',
      flex: 'none',
      padding: 12,
      paddingBottom: 0,
      fontSize: 12,
      fontWeight: 600,
      color: 'white',
      alignItems: 'center'
    }
  }, _react["default"].createElement("div", {
    style: {
      flex: 'none'
    }
  }, props.label), _react["default"].createElement("div", {
    style: {
      flex: '1 1 auto',
      maxHeight: 20,
      fontSize: 16,
      fontWeight: 400,
      marginLeft: 6,
      color: 'rgb(38, 139, 210)',
      overflowX: 'hidden'
    }
  }, props.value));
};

var SessionView = function SessionView(props) {
  var _ref = props.webchatHooks || (0, _hooks.useWebchat)(),
      webchatState = _ref.webchatState,
      updateDevSettings = _ref.updateDevSettings;

  var input = webchatState.latestInput,
      session = webchatState.session,
      lastRoutePath = webchatState.lastRoutePath;

  var toggleSessionView = function toggleSessionView() {
    return updateDevSettings(_objectSpread({}, webchatState.devSettings, {
      showSessionView: !webchatState.devSettings.showSessionView
    }));
  };

  var toggleKeepSessionOnReload = function toggleKeepSessionOnReload() {
    return updateDevSettings(_objectSpread({}, webchatState.devSettings, {
      keepSessionOnReload: !webchatState.devSettings.keepSessionOnReload
    }));
  };

  return _react["default"].createElement("div", {
    style: {
      position: 'relative',
      width: webchatState.devSettings.showSessionView ? '100%' : '0%',
      height: '100%',
      display: 'flex',
      backgroundColor: '#002B35',
      fontFamily: 'Arial, Helvetica, sans-serif',
      flexDirection: 'column',
      zIndex: 100000,
      transition: 'all .2s ease-in-out'
    }
  }, _react["default"].createElement("div", {
    style: {
      position: 'absolute',
      top: 10,
      right: -32,
      width: 32,
      height: 32,
      cursor: 'pointer',
      display: 'flex',
      alignItems: 'center',
      justifyContent: 'center',
      color: 'rgba(255, 255, 255, 0.8)',
      fontSize: 14,
      fontWeight: 600,
      backgroundColor: '#002B35',
      flexDirection: 'column',
      zIndex: 100000,
      borderTopRightRadius: 6,
      borderBottomRightRadius: 6
    },
    onClick: toggleSessionView
  }, webchatState.devSettings.showSessionView ? '⇤' : '⇥'), _react["default"].createElement("div", {
    style: {
      overflowY: 'auto',
      overflowX: 'hidden',
      display: 'flex',
      flex: '1 1 auto',
      flexDirection: 'column'
    }
  }, _react["default"].createElement("div", {
    style: {
      padding: 12,
      textAlign: 'center',
      color: 'white',
      borderBottom: '1px solid rgba(255, 255, 255, 0.3)'
    }
  }, "Botonic Dev Console"), _react["default"].createElement(SessionViewAttribute, {
    label: "INPUT:",
    value: input && Object.keys(input).length ? "[".concat(input.type, "] ").concat(input.data) : ''
  }), _react["default"].createElement(SessionViewAttribute, {
    label: "PAYLOAD:",
    value: input.payload
  }), _react["default"].createElement(SessionViewAttribute, {
    label: "INTENT:",
    value: input.intent ? "".concat(input.intent, " (").concat((input.confidence * 100).toFixed(1), "%)") : ''
  }), _react["default"].createElement(SessionViewAttribute, {
    label: "PATH:",
    value: lastRoutePath ? "/".concat(lastRoutePath) : '/'
  }), _react["default"].createElement(SessionViewAttribute, {
    label: "SESSION:"
  }), _react["default"].createElement("div", {
    style: {
      flex: '1 1 auto',
      height: '100%',
      overflowY: 'auto'
    }
  }, _react["default"].createElement(_reactJsonTree["default"], {
    data: session,
    hideRoot: true
  })), _react["default"].createElement("div", {
    style: {
      flex: 'none',
      padding: 12,
      color: 'rgba(255, 255, 255, 0.8)',
      fontSize: 12
    }
  }, _react["default"].createElement("label", null, _react["default"].createElement("input", {
    type: "checkbox",
    name: "toggleKeepSessionOnReload",
    checked: Boolean(webchatState.devSettings.keepSessionOnReload),
    onChange: toggleKeepSessionOnReload,
    style: {
      marginRight: 5
    }
  }), "Keep session on reload"))));
};

exports.SessionView = SessionView;
//# sourceMappingURL=sessionView.js.map