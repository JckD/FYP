"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.WebchatApp = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _react = _interopRequireDefault(require("react"));

var _reactDom = require("react-dom");

var _webchat = require("./webchat");

var _core = require("@botonic/core");

var _utils = require("./utils");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { (0, _defineProperty2["default"])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

var WebchatApp =
/*#__PURE__*/
function () {
  function WebchatApp(_ref) {
    var _ref$theme = _ref.theme,
        theme = _ref$theme === void 0 ? {} : _ref$theme,
        persistentMenu = _ref.persistentMenu,
        blockInputs = _ref.blockInputs,
        emojiPicker = _ref.emojiPicker,
        onInit = _ref.onInit,
        onOpen = _ref.onOpen,
        onClose = _ref.onClose,
        onMessage = _ref.onMessage,
        appId = _ref.appId;
    (0, _classCallCheck2["default"])(this, WebchatApp);
    this.theme = theme;
    this.persistentMenu = persistentMenu;
    this.blockInputs = blockInputs;
    this.emojiPicker = emojiPicker;
    this.onInit = onInit;
    this.onOpen = onOpen;
    this.onClose = onClose;
    this.onMessage = onMessage;
    this.webchatRef = _react["default"].createRef();
    this.appId = appId;
  }

  (0, _createClass2["default"])(WebchatApp, [{
    key: "onInitWebchat",
    value: function onInitWebchat() {
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      this.onInit && this.onInit.apply(this, [this].concat(args));
    }
  }, {
    key: "onOpenWebchat",
    value: function onOpenWebchat() {
      for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        args[_key2] = arguments[_key2];
      }

      this.onOpen && this.onOpen.apply(this, [this].concat(args));
    }
  }, {
    key: "onCloseWebchat",
    value: function onCloseWebchat() {
      for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
        args[_key3] = arguments[_key3];
      }

      this.onClose && this.onClose.apply(this, [this].concat(args));
    }
  }, {
    key: "onUserInput",
    value: function () {
      var _onUserInput = (0, _asyncToGenerator2["default"])(
      /*#__PURE__*/
      _regenerator["default"].mark(function _callee(_ref2) {
        var user, input;
        return _regenerator["default"].wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                user = _ref2.user, input = _ref2.input;
                this.onMessage && this.onMessage(this, {
                  from: 'user',
                  message: input
                });
                this.hubtypeService.postMessage(user, input);

              case 3:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function onUserInput(_x) {
        return _onUserInput.apply(this, arguments);
      }

      return onUserInput;
    }()
  }, {
    key: "onStateChange",
    value: function onStateChange(_ref3) {
      var _this = this;

      var user = _ref3.user,
          messagesJSON = _ref3.messagesJSON;

      if (!this.hubtypeService && user) {
        var lastMessage = messagesJSON[messagesJSON.length - 1];
        this.hubtypeService = new _core.HubtypeService({
          appId: this.appId,
          user: user,
          lastMessageId: lastMessage && lastMessage.id,
          onEvent: function onEvent(event) {
            return _this.onServiceEvent(event);
          }
        });
      }
    }
  }, {
    key: "onServiceEvent",
    value: function onServiceEvent(event) {
      if (event.isError) this.webchatRef.current.setError({
        message: event.errorMessage
      });else if (event.message.type === 'sender_action') this.setTyping(event.message.data === 'typing_on');else this.addBotMessage(event.message);
    }
  }, {
    key: "updateUser",
    value: function updateUser(user) {
      this.webchatRef.current.updateUser(user);
    }
  }, {
    key: "addBotMessage",
    value: function addBotMessage(message) {
      this.webchatRef.current.addBotResponse({
        response: (0, _utils.msgToBotonic)(message, this.theme.customMessageTypes)
      });
    }
  }, {
    key: "addBotText",
    value: function addBotText(text) {
      this.addBotMessage({
        type: 'text',
        data: text
      });
    }
  }, {
    key: "addUserMessage",
    value: function addUserMessage(message) {
      this.webchatRef.current.addUserMessage(message);
    }
  }, {
    key: "addUserText",
    value: function addUserText(text) {
      this.webchatRef.current.addUserMessage({
        type: 'text',
        data: text
      });
    }
  }, {
    key: "addUserPayload",
    value: function addUserPayload(payload) {
      this.webchatRef.current.addUserMessage({
        type: 'postback',
        payload: payload
      });
    }
  }, {
    key: "setTyping",
    value: function setTyping(typing) {
      this.webchatRef.current.setTyping(typing);
    }
  }, {
    key: "open",
    value: function open() {
      this.webchatRef.current.openWebchat();
    }
  }, {
    key: "close",
    value: function close() {
      this.webchatRef.current.closeWebchat();
    }
  }, {
    key: "toggle",
    value: function toggle() {
      this.webchatRef.current.toggleWebchat();
    }
  }, {
    key: "render",
    value: function render(dest) {
      var _this2 = this;

      var optionsAtRuntime = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      var _optionsAtRuntime$the = optionsAtRuntime.theme,
          theme = _optionsAtRuntime$the === void 0 ? {} : _optionsAtRuntime$the,
          persistentMenu = optionsAtRuntime.persistentMenu,
          blockInputs = optionsAtRuntime.blockInputs,
          emojiPicker = optionsAtRuntime.emojiPicker,
          onInit = optionsAtRuntime.onInit,
          onOpen = optionsAtRuntime.onOpen,
          onClose = optionsAtRuntime.onClose,
          onMessage = optionsAtRuntime.onMessage,
          appId = optionsAtRuntime.appId,
          webchatOptions = (0, _objectWithoutProperties2["default"])(optionsAtRuntime, ["theme", "persistentMenu", "blockInputs", "emojiPicker", "onInit", "onOpen", "onClose", "onMessage", "appId"]);
      theme = _objectSpread({}, this.theme, {}, theme);
      persistentMenu = persistentMenu || this.persistentMenu;
      blockInputs = blockInputs || this.blockInputs;
      emojiPicker = emojiPicker || this.emojiPicker;
      this.onInit = onInit || this.onInit;
      this.onOpen = onOpen || this.onOpen;
      this.onClose = onClose || this.onClose;
      this.onMessage = onMessage || this.onMessage;
      this.appId = appId || this.appId;
      (0, _reactDom.render)(_react["default"].createElement(_webchat.Webchat, (0, _extends2["default"])({
        ref: this.webchatRef
      }, webchatOptions, {
        theme: theme,
        persistentMenu: persistentMenu,
        blockInputs: blockInputs,
        emojiPicker: emojiPicker,
        onInit: function onInit() {
          return _this2.onInitWebchat.apply(_this2, arguments);
        },
        onOpen: function onOpen() {
          return _this2.onOpenWebchat.apply(_this2, arguments);
        },
        onClose: function onClose() {
          return _this2.onCloseWebchat.apply(_this2, arguments);
        },
        onUserInput: function onUserInput() {
          return _this2.onUserInput.apply(_this2, arguments);
        },
        onStateChange: function onStateChange(webchatState) {
          return _this2.onStateChange(webchatState);
        }
      })), dest);
    }
  }]);
  return WebchatApp;
}();

exports.WebchatApp = WebchatApp;
//# sourceMappingURL=webchat-app.js.map