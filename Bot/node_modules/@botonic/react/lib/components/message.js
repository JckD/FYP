"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Message = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _react = _interopRequireWildcard(require("react"));

var _v = _interopRequireDefault(require("uuid/v4"));

var _core = require("@botonic/core");

var _utils = require("../utils");

var _contexts = require("../contexts");

var _button = require("./button");

var _reply = require("./reply");

var _botonic_react_logo100x = _interopRequireDefault(require("../webchat/botonic_react_logo100x100.png"));

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { (0, _defineProperty2["default"])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

var Message = function Message(props) {
  var _useContext = (0, _react.useContext)(_contexts.RequestContext),
      defaultTyping = _useContext.defaultTyping,
      defaultDelay = _useContext.defaultDelay;

  var _props$type = props.type,
      type = _props$type === void 0 ? '' : _props$type,
      _props$blob = props.blob,
      blob = _props$blob === void 0 ? true : _props$blob,
      _props$from = props.from,
      from = _props$from === void 0 ? 'bot' : _props$from,
      _props$delay = props.delay,
      delay = _props$delay === void 0 ? defaultDelay : _props$delay,
      _props$typing = props.typing,
      typing = _props$typing === void 0 ? defaultTyping : _props$typing,
      children = props.children,
      json = props.json,
      style = props.style,
      otherProps = (0, _objectWithoutProperties2["default"])(props, ["type", "blob", "from", "delay", "typing", "children", "json", "style"]);

  var _useContext2 = (0, _react.useContext)(_contexts.WebchatContext),
      webchatState = _useContext2.webchatState,
      addMessage = _useContext2.addMessage,
      updateReplies = _useContext2.updateReplies;

  var _useState = (0, _react.useState)({
    id: props.id || (0, _v["default"])()
  }),
      _useState2 = (0, _slicedToArray2["default"])(_useState, 2),
      state = _useState2[0],
      setState = _useState2[1];

  var replies = _react["default"].Children.toArray(children).filter(function (e) {
    return e.type === _reply.Reply;
  });

  var buttons = _react["default"].Children.toArray(children).filter(function (e) {
    return e.type === _button.Button;
  });

  var textChildren = _react["default"].Children.toArray(children).filter(function (e) {
    return ![_button.Button, _reply.Reply].includes(e.type);
  });

  if ((0, _core.isBrowser)()) {
    (0, _react.useEffect)(function () {
      var decomposedChildren = json;
      var message = {
        id: state.id,
        type: type,
        data: decomposedChildren ? decomposedChildren : textChildren,
        from: from,
        buttons: buttons.map(function (b) {
          return {
            payload: b.props.payload,
            path: b.props.path,
            url: b.props.url,
            title: b.props.children
          };
        }),
        delay: delay,
        typing: typing,
        replies: replies.map(function (r) {
          return {
            payload: r.props.payload,
            path: r.props.path,
            url: r.props.url,
            text: r.props.children
          };
        }),
        display: delay + typing == 0
      };
      addMessage(message);
    }, []);
    (0, _react.useEffect)(function () {
      var msg = webchatState.messagesJSON.find(function (m) {
        return m.id === state.id;
      });

      if (msg && msg.display && webchatState.messagesJSON.filter(function (m) {
        return !m.display;
      }).length == 0) {
        updateReplies(replies);
      }
    }, [webchatState.messagesJSON]);
  }

  var isFromUser = function isFromUser() {
    return from === 'user';
  };

  var isFromBot = function isFromBot() {
    return from === 'bot';
  };

  var getBgColor = function getBgColor() {
    if (!blob) return 'transparent';
    return isFromUser() ? webchatState.theme.brandColor : '#F1F0F0';
  };

  var getMessageStyle = function getMessageStyle() {
    return isFromBot() ? webchatState.theme.botMessageStyle || {} : webchatState.theme.userMessageStyle || {};
  };

  var renderBrowser = function renderBrowser() {
    var m = webchatState.messagesJSON.find(function (m) {
      return m.id === state.id;
    });
    if (!m || !m.display) return _react["default"].createElement(_react["default"].Fragment, null);
    var pointerSize = 6;
    var pointerStyles = {
      position: 'absolute',
      top: '50%',
      width: 0,
      height: 0,
      border: "".concat(pointerSize, "px solid transparent"),
      marginTop: -pointerSize
    };
    var BotMessageImage = _botonic_react_logo100x["default"];
    if ('brandImage' in webchatState.theme) BotMessageImage = webchatState.theme.brandImage;
    if ('botMessageImage' in webchatState.theme) BotMessageImage = webchatState.theme.botMessageImage;
    return _react["default"].createElement("div", {
      style: {
        display: 'flex',
        justifyContent: isFromUser() ? 'flex-end' : 'flex-start',
        position: 'relative',
        paddingLeft: 5
      }
    }, isFromBot() && BotMessageImage && _react["default"].createElement("div", {
      style: {
        width: 28,
        padding: 4,
        flex: 'none',
        display: 'flex',
        alignItems: 'center',
        justifyContent: 'center'
      }
    }, _react["default"].createElement("img", {
      style: {
        width: '100%'
      },
      src: (0, _utils.staticAsset)(BotMessageImage)
    })), _react["default"].createElement("div", (0, _extends2["default"])({
      style: _objectSpread({
        position: 'relative',
        margin: 8,
        fontFamily: 'Arial, Helvetica, sans-serif',
        borderRadius: 8,
        backgroundColor: getBgColor(),
        color: isFromUser() ? '#FFF' : '#000',
        border: "1px solid ".concat(getBgColor()),
        maxWidth: blob ? '60%' : 'calc(100% - 16px)'
      }, getMessageStyle(), {}, style)
    }, otherProps), _react["default"].createElement("div", {
      style: {
        padding: '8px 12px',
        display: 'flex',
        flexDirection: 'column',
        whiteSpace: 'pre-line'
      }
    }, textChildren), buttons, isFromUser() && blob && _react["default"].createElement("div", {
      style: _objectSpread({}, pointerStyles, {
        borderLeftColor: getBgColor(),
        right: 0,
        borderRight: 0,
        marginRight: -pointerSize
      })
    }), isFromBot() && blob && _react["default"].createElement("div", {
      style: _objectSpread({}, pointerStyles, {
        borderRightColor: getBgColor(),
        left: 0,
        borderLeft: 0,
        marginLeft: -pointerSize
      })
    })));
  };

  var _blob = props.blob,
      _json = props.json,
      nodeProps = (0, _objectWithoutProperties2["default"])(props, ["blob", "json"]);

  var renderNode = function renderNode() {
    return type === 'custom' ? _react["default"].createElement("message", (0, _extends2["default"])({
      json: JSON.stringify(_json)
    }, nodeProps)) : _react["default"].createElement("message", nodeProps, children);
  };

  if ((0, _core.isBrowser)()) return renderBrowser();else if ((0, _core.isNode)()) return renderNode();
};

exports.Message = Message;
//# sourceMappingURL=message.js.map