{"version":3,"sources":["../../src/components/messageTemplate.jsx"],"names":["MessageTemplate","props","renderBrowser","renderNode","__html","JSON","stringify","payload"],"mappings":";;;;;;;;;AAAA;;AAEA;;AACA;;AAEO,IAAMA,eAAe,GAAG,SAAlBA,eAAkB,CAAAC,KAAK,EAAI;AACtC,MAAMC,aAAa,GAAG,SAAhBA,aAAgB;AAAA,WAAM,IAAN;AAAA,GAAtB;;AACA,MAAMC,UAAU,GAAG,SAAbA,UAAa;AAAA,WACjB;AAAS,MAAA,IAAI,EAAC;AAAd,OACE;AACE,MAAA,uBAAuB,EAAE;AAAEC,QAAAA,MAAM,EAAEC,IAAI,CAACC,SAAL,CAAeL,KAAK,CAACM,OAArB;AAAV;AAD3B,MADF,CADiB;AAAA,GAAnB;;AAOA,MAAI,sBAAJ,EAAiB,OAAOL,aAAa,EAApB,CAAjB,KACK,IAAI,mBAAJ,EAAc,OAAOC,UAAU,EAAjB;AACpB,CAXM","sourcesContent":["import React from 'react'\n\nimport { isBrowser, isNode } from '@botonic/core'\nimport { WebchatContext } from '../contexts'\n\nexport const MessageTemplate = props => {\n  const renderBrowser = () => null\n  const renderNode = () => (\n    <message type='template'>\n      <pre\n        dangerouslySetInnerHTML={{ __html: JSON.stringify(props.payload) }}\n      />\n    </message>\n  )\n  if (isBrowser()) return renderBrowser()\n  else if (isNode()) return renderNode()\n}\n"],"file":"messageTemplate.js"}