"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Text = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _typeof2 = _interopRequireDefault(require("@babel/runtime/helpers/typeof"));

var _react = _interopRequireDefault(require("react"));

var _message = require("./message");

var serialize = function serialize(textProps) {
  var text = textProps.children;
  /* As text message can have multiple children ( a text with buttons or quickreplies )
    we only want to store the text, we don't want to store the buttons or quickreplies.
    If we have an array of string, we want to join all the string as a single string, for 
    future render actions
  */

  if ((0, _typeof2["default"])(textProps.children) == 'object') {
    text = textProps.children.join(' ');
    if (typeof textProps.children[1] != 'string') text = textProps.children[0];
  }

  return {
    text: text
  };
};

var Text = function Text(props) {
  return _react["default"].createElement(_message.Message, (0, _extends2["default"])({
    json: serialize(props)
  }, props, {
    type: "text"
  }), props.children);
};

exports.Text = Text;
Text.serialize = serialize;
//# sourceMappingURL=text.js.map