{"version":3,"sources":["../../src/components/button.jsx"],"names":["Button","props","WebchatContext","webchatState","openWebview","sendPayload","hover","setHover","handleClick","event","preventDefault","webview","params","path","payload","url","window","open","onClick","renderBrowser","theme","customButton","CustomButton","e","children","display","width","maxHeight","fontSize","textAlign","alignContent","justifyContent","padding","color","brandColor","backgroundColor","border","top","bottom","renderNode","Webview","name","serialize","buttonProps","button","title"],"mappings":"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","sourcesContent":["import React, { useContext, useState } from 'react'\n\nimport { isBrowser, isNode, params2queryString } from '@botonic/core'\nimport { WebchatContext } from '../contexts'\n\nexport const Button = props => {\n  const { webchatState, openWebview, sendPayload } = useContext(WebchatContext)\n  const [hover, setHover] = useState(false)\n\n  const handleClick = event => {\n    event.preventDefault()\n    if (props.webview) openWebview(props.webview, props.params)\n    else if (props.path) sendPayload(`__PATH_PAYLOAD__${props.path}`)\n    else if (props.payload) sendPayload(props.payload)\n    else if (props.url) {\n      window.open(props.url)\n    }\n    if (props.onClick) props.onClick()\n  }\n\n  const renderBrowser = () => {\n    if (webchatState.theme.customButton) {\n      let CustomButton = webchatState.theme.customButton\n      return (\n        <div onClick={e => handleClick(e)}>\n          <CustomButton>{props.children}</CustomButton>\n        </div>\n      )\n    }\n    return (\n      <button\n        theme={webchatState.theme}\n        onMouseEnter={() => setHover(true)}\n        onMouseLeave={() => setHover(false)}\n        onClick={e => handleClick(e)}\n        style={{\n          display: 'flex',\n          width: '100%',\n          maxHeight: 80,\n          fontSize: 14,\n          textAlign: 'center',\n          alignContent: 'center',\n          justifyContent: 'center',\n          padding: '12px 32px',\n          color:\n            (webchatState.theme && webchatState.theme.brandColor) || '#000',\n          backgroundColor: hover ? '#f3f3f3' : '#fff',\n          border: 'none',\n          border: '1px solid #f1f0f0',\n          cursor: 'pointer',\n          outline: 0,\n          borderTopRightRadius: props.top || 0,\n          borderTopLeftRadius: props.top || 0,\n          borderBottomRightRadius: props.bottom || 0,\n          borderBottomLeftRadius: props.bottom || 0,\n          overflow: 'hidden'\n        }}\n      >\n        {props.children}\n      </button>\n    )\n  }\n\n  const renderNode = () => {\n    if (props.webview) {\n      let Webview = props.webview\n      let params = ''\n      if (props.params) params = params2queryString(props.params)\n      return (\n        <button url={`/webviews/${Webview.name}?${params}`}>\n          {props.children}\n        </button>\n      )\n    } else if (props.path) {\n      let payload = `__PATH_PAYLOAD__${props.path}`\n      return <button payload={payload}>{props.children}</button>\n    } else if (props.payload) {\n      return <button payload={props.payload}>{props.children}</button>\n    } else if (props.url) {\n      return <button url={props.url}>{props.children}</button>\n    }\n  }\n\n  if (isBrowser()) return renderBrowser()\n  else if (isNode()) return renderNode()\n}\n\nButton.serialize = buttonProps => {\n  let payload = buttonProps.payload\n  if (buttonProps.path) payload = `__PATH_PAYLOAD__${buttonProps.path}`\n  return {\n    button: {\n      payload,\n      url: buttonProps.url,\n      webview: buttonProps.webview,\n      title: buttonProps.children\n    }\n  }\n}\n"],"file":"button.js"}