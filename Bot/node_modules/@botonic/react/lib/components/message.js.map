{"version":3,"sources":["../../src/components/message.jsx"],"names":["Message","props","RequestContext","defaultTyping","defaultDelay","type","blob","from","delay","typing","children","json","style","otherProps","WebchatContext","webchatState","addMessage","updateReplies","id","state","setState","replies","React","Children","toArray","filter","e","Reply","buttons","Button","textChildren","includes","decomposedChildren","message","data","map","b","payload","path","url","title","r","text","display","msg","messagesJSON","find","m","length","isFromUser","isFromBot","getBgColor","theme","brandColor","getMessageStyle","botMessageStyle","userMessageStyle","renderBrowser","pointerSize","pointerStyles","position","top","width","height","border","marginTop","BotMessageImage","Logo","brandImage","botMessageImage","justifyContent","paddingLeft","padding","flex","alignItems","margin","fontFamily","borderRadius","backgroundColor","color","maxWidth","flexDirection","whiteSpace","borderLeftColor","right","borderRight","marginRight","borderRightColor","left","borderLeft","marginLeft","_blob","_json","nodeProps","renderNode","JSON","stringify"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useContext } from 'react'\nimport uuid from 'uuid/v4'\nimport { isBrowser, isNode } from '@botonic/core'\nimport { staticAsset } from '../utils'\nimport { WebchatContext, RequestContext } from '../contexts'\nimport { Button } from './button'\nimport { Reply } from './reply'\nimport Logo from '../webchat/botonic_react_logo100x100.png'\n\nexport const Message = props => {\n  const { defaultTyping, defaultDelay } = useContext(RequestContext)\n  const {\n    type = '',\n    blob = true,\n    from = 'bot',\n    delay = defaultDelay,\n    typing = defaultTyping,\n    children,\n    json,\n    style,\n    ...otherProps\n  } = props\n\n  const { webchatState, addMessage, updateReplies } = useContext(WebchatContext)\n  const [state, setState] = useState({\n    id: props.id || uuid()\n  })\n\n  const replies = React.Children.toArray(children).filter(e => e.type === Reply)\n  const buttons = React.Children.toArray(children).filter(\n    e => e.type === Button\n  )\n  const textChildren = React.Children.toArray(children).filter(\n    e => ![Button, Reply].includes(e.type)\n  )\n  if (isBrowser()) {\n    useEffect(() => {\n      let decomposedChildren = json\n      let message = {\n        id: state.id,\n        type,\n        data: decomposedChildren ? decomposedChildren : textChildren,\n        from,\n        buttons: buttons.map(b => ({\n          payload: b.props.payload,\n          path: b.props.path,\n          url: b.props.url,\n          title: b.props.children\n        })),\n        delay,\n        typing,\n        replies: replies.map(r => ({\n          payload: r.props.payload,\n          path: r.props.path,\n          url: r.props.url,\n          text: r.props.children\n        })),\n        display: delay + typing == 0\n      }\n      addMessage(message)\n    }, [])\n\n    useEffect(() => {\n      let msg = webchatState.messagesJSON.find(m => m.id === state.id)\n      if (\n        msg &&\n        msg.display &&\n        webchatState.messagesJSON.filter(m => !m.display).length == 0\n      ) {\n        updateReplies(replies)\n      }\n    }, [webchatState.messagesJSON])\n  }\n\n  const isFromUser = () => from === 'user'\n  const isFromBot = () => from === 'bot'\n  const getBgColor = () => {\n    if (!blob) return 'transparent'\n    return isFromUser() ? webchatState.theme.brandColor : '#F1F0F0'\n  }\n\n  const getMessageStyle = () =>\n    isFromBot()\n      ? webchatState.theme.botMessageStyle || {}\n      : webchatState.theme.userMessageStyle || {}\n\n  const renderBrowser = () => {\n    let m = webchatState.messagesJSON.find(m => m.id === state.id)\n    if (!m || !m.display) return <></>\n    let pointerSize = 6\n    let pointerStyles = {\n      position: 'absolute',\n      top: '50%',\n      width: 0,\n      height: 0,\n      border: `${pointerSize}px solid transparent`,\n      marginTop: -pointerSize\n    }\n\n    let BotMessageImage = Logo\n    if ('brandImage' in webchatState.theme)\n      BotMessageImage = webchatState.theme.brandImage\n    if ('botMessageImage' in webchatState.theme)\n      BotMessageImage = webchatState.theme.botMessageImage\n    return (\n      <div\n        style={{\n          display: 'flex',\n          justifyContent: isFromUser() ? 'flex-end' : 'flex-start',\n          position: 'relative',\n          paddingLeft: 5\n        }}\n      >\n        {isFromBot() && BotMessageImage && (\n          <div\n            style={{\n              width: 28,\n              padding: 4,\n              flex: 'none',\n              display: 'flex',\n              alignItems: 'center',\n              justifyContent: 'center'\n            }}\n          >\n            <img style={{ width: '100%' }} src={staticAsset(BotMessageImage)} />\n          </div>\n        )}\n\n        <div\n          style={{\n            position: 'relative',\n            margin: 8,\n            fontFamily: 'Arial, Helvetica, sans-serif',\n            borderRadius: 8,\n            backgroundColor: getBgColor(),\n            color: isFromUser() ? '#FFF' : '#000',\n            border: `1px solid ${getBgColor()}`,\n            maxWidth: blob ? '60%' : 'calc(100% - 16px)',\n            ...getMessageStyle(),\n            ...style\n          }}\n          {...otherProps}\n        >\n          <div\n            style={{\n              padding: '8px 12px',\n              display: 'flex',\n              flexDirection: 'column',\n              whiteSpace: 'pre-line'\n            }}\n          >\n            {textChildren}\n          </div>\n          {buttons}\n          {isFromUser() && blob && (\n            <div\n              style={{\n                ...pointerStyles,\n                borderLeftColor: getBgColor(),\n                right: 0,\n                borderRight: 0,\n                marginRight: -pointerSize\n              }}\n            />\n          )}\n          {isFromBot() && blob && (\n            <div\n              style={{\n                ...pointerStyles,\n                borderRightColor: getBgColor(),\n                left: 0,\n                borderLeft: 0,\n                marginLeft: -pointerSize\n              }}\n            />\n          )}\n        </div>\n      </div>\n    )\n  }\n\n  let { blob: _blob, json: _json, ...nodeProps } = props\n  const renderNode = () =>\n    type === 'custom' ? (\n      <message json={JSON.stringify(_json)} {...nodeProps} />\n    ) : (\n      <message {...nodeProps}>{children}</message>\n    )\n\n  if (isBrowser()) return renderBrowser()\n  else if (isNode()) return renderNode()\n}\n"],"file":"message.js"}