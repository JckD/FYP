"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Element = void 0;

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));

var _react = _interopRequireDefault(require("react"));

var _core = require("@botonic/core");

var Element = function Element(props) {
  var renderBrowser = function renderBrowser() {
    return _react["default"].createElement("div", {
      style: {
        display: 'flex',
        flexDirection: 'column',
        width: 222,
        marginRight: 6,
        borderRadius: 6,
        border: '1px solid #F1F0F0',
        overflow: 'hidden'
      }
    }, props.children);
  };

  var renderNode = function renderNode() {
    return _react["default"].createElement("element", null, props.children);
  };

  if ((0, _core.isBrowser)()) return renderBrowser();else if ((0, _core.isNode)()) return renderNode();
};

exports.Element = Element;

Element.serialize = function (elementProps) {
  var element = Object.assign.apply(Object, [{}].concat((0, _toConsumableArray2["default"])(elementProps.children.filter(function (c) {
    return c && c.type && c.type.name != 'Button';
  }).map(function (c) {
    return c.type.serialize && c.type.serialize(c.props);
  })))); // When we are serializer buttons from backend, we are receiving the data
  // as an array of buttons, so we have to keep robust with serve and deal with arrays

  element['buttons'] = (0, _toConsumableArray2["default"])(elementProps.children.filter(function (c) {
    if (c instanceof Array) return true;
    return c && c.type && c.type.name == 'Button';
  }).map(function (b) {
    if (b instanceof Array) {
      return b.map(function (bb) {
        return bb && bb.type && bb.type.serialize && bb.type.serialize(bb.props).button;
      });
    }

    return b && b.type && b.type.serialize && b.type.serialize(b.props).button;
  })); // When we have the buttons from backend, we have all buttons inside an array on the first position
  // of another array in element['buttons'] we want that element['buttons'] to be an array of buttons,
  // not an array of another array of buttons

  if (element['buttons'][0] instanceof Array) element['buttons'] = element['buttons'][0];
  return element;
};
//# sourceMappingURL=element.js.map