{"version":3,"sources":["../src/nlu.js"],"names":["getNLU","input","integrations","df_session_id","Math","random","intent","confidence","intents","entities","dialogflow","headers","Authorization","token","url","params","query","data","lang","sessionId","dialogflow_resp","result","metadata","intentName","parameters","watson","luis","region","appID","endpointKey","q","verbose","luis_resp","topScoringIntent","score"],"mappings":";;;;;;;;;;;;;AAAA;;AACA;SAEsBA,M;;;;;;;+BAAf,iBAAsBC,KAAtB,EAA6BC,YAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AACDC,YAAAA,aADC,GACeC,IAAI,CAACC,MAAL,EADf;AAEDC,YAAAA,MAFC,GAEQ,IAFR;AAGDC,YAAAA,UAHC,GAGY,CAHZ;AAIDC,YAAAA,OAJC,GAIS,EAJT;AAKDC,YAAAA,QALC,GAKU,EALV;;AAAA,gBAMAP,YANA;AAAA;AAAA;AAAA;;AAAA,6CAMqB;AAAEI,cAAAA,MAAM,EAANA,MAAF;AAAUC,cAAAA,UAAU,EAAVA,UAAV;AAAsBC,cAAAA,OAAO,EAAPA,OAAtB;AAA+BC,cAAAA,QAAQ,EAARA;AAA/B,aANrB;;AAAA;AAAA,iBAODP,YAAY,CAACQ,UAPZ;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA,mBAS2B,uBAAM;AAChCC,cAAAA,OAAO,EAAE;AACPC,gBAAAA,aAAa,EAAE,YAAYV,YAAY,CAACQ,UAAb,CAAwBG;AAD5C,eADuB;AAIhCC,cAAAA,GAAG,EAAE,qCAJ2B;AAKhCC,cAAAA,MAAM,EAAE;AACNC,gBAAAA,KAAK,EAAEf,KAAK,CAACgB,IADP;AAENC,gBAAAA,IAAI,EAAE,IAFA;AAGNC,gBAAAA,SAAS,EAAEhB;AAHL;AALwB,aAAN,CAT3B;;AAAA;AASGiB,YAAAA,eATH;;AAoBD,gBAAIA,eAAe,IAAIA,eAAe,CAACH,IAAvC,EAA6C;AAC3CX,cAAAA,MAAM,GAAGc,eAAe,CAACH,IAAhB,CAAqBI,MAArB,CAA4BC,QAA5B,CAAqCC,UAA9C;AACAd,cAAAA,QAAQ,GAAGW,eAAe,CAACH,IAAhB,CAAqBI,MAArB,CAA4BG,UAAvC;AACD;;AAvBA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA,iBAyBMtB,YAAY,CAACuB,MAzBnB;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA,iBA6CMvB,YAAY,CAACwB,IA7CnB;AAAA;AAAA;AAAA;;AA8CCA,YAAAA,IA9CD,GA8CQxB,YAAY,CAACwB,IA9CrB;AAAA;AAAA;AAAA,mBAgDqB,uBAAM;AAC1BZ,cAAAA,GAAG,oBACDY,IAAI,CAACC,MADJ,yDAE4CD,IAAI,CAACE,KAFjD,CADuB;AAI1Bb,cAAAA,MAAM,EAAE;AACN,oCAAoBW,IAAI,CAACG,WADnB;AAENC,gBAAAA,CAAC,EAAE7B,KAAK,CAACgB,IAFH;AAGNc,gBAAAA,OAAO,EAAE;AAHH;AAJkB,aAAN,CAhDrB;;AAAA;AAgDGC,YAAAA,SAhDH;;AA0DD,gBAAIA,SAAS,IAAIA,SAAS,CAACf,IAA3B,EAAiC;AAC/BX,cAAAA,MAAM,GAAG0B,SAAS,CAACf,IAAV,CAAegB,gBAAf,CAAgC3B,MAAzC;AACAC,cAAAA,UAAU,GAAGyB,SAAS,CAACf,IAAV,CAAegB,gBAAf,CAAgCC,KAA7C;AACA1B,cAAAA,OAAO,GAAGwB,SAAS,CAACf,IAAV,CAAeT,OAAzB;AACAC,cAAAA,QAAQ,GAAGuB,SAAS,CAACf,IAAV,CAAeR,QAA1B;AACD;;AA/DA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA,6CAkEE;AAAEH,cAAAA,MAAM,EAANA,MAAF;AAAUC,cAAAA,UAAU,EAAVA,UAAV;AAAsBC,cAAAA,OAAO,EAAPA,OAAtB;AAA+BC,cAAAA,QAAQ,EAARA;AAA/B,aAlEF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G","sourcesContent":["import axios from 'axios'\n//import { AssistantV1 } from 'watson-developer-cloud/assistant/v1'\n\nexport async function getNLU(input, integrations) {\n  let df_session_id = Math.random()\n  let intent = null\n  let confidence = 0\n  let intents = []\n  let entities = []\n  if (!integrations) return { intent, confidence, intents, entities }\n  if (integrations.dialogflow) {\n    try {\n      let dialogflow_resp = await axios({\n        headers: {\n          Authorization: 'Bearer ' + integrations.dialogflow.token\n        },\n        url: 'https://api.dialogflow.com/v1/query',\n        params: {\n          query: input.data,\n          lang: 'en',\n          sessionId: df_session_id\n        }\n      })\n      if (dialogflow_resp && dialogflow_resp.data) {\n        intent = dialogflow_resp.data.result.metadata.intentName\n        entities = dialogflow_resp.data.result.parameters\n      }\n    } catch (e) {}\n  } else if (integrations.watson) {\n    // AssistantV1 only works for Node\n    /*let w = integrations.watson\n    let assistant = new AssistantV1({\n      version: '2017-05-26',\n      ...integrations.watson\n    })\n\n    assistant.message = util.promisify(assistant.message)\n\n    try {\n      let res = await assistant.message({\n        input: { text: input.data },\n        workspace_id: integrations.watson.workspace_id\n      })\n      intent = res.intents[0].intent\n      confidence = res.intents[0].confidence\n      intents = res.intents\n      entities = res.entities\n    } catch (e) {}*/\n  } else if (integrations.luis) {\n    let luis = integrations.luis\n    try {\n      let luis_resp = await axios({\n        url: `https://${\n          luis.region\n        }.api.cognitive.microsoft.com/luis/v2.0/apps/${luis.appID}`,\n        params: {\n          'subscription-key': luis.endpointKey,\n          q: input.data,\n          verbose: true\n        }\n      })\n      if (luis_resp && luis_resp.data) {\n        intent = luis_resp.data.topScoringIntent.intent\n        confidence = luis_resp.data.topScoringIntent.score\n        intents = luis_resp.data.intents\n        entities = luis_resp.data.entities\n      }\n    } catch (e) {}\n  }\n  return { intent, confidence, intents, entities }\n}\n"],"file":"nlu.js"}