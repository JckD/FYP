{"version":3,"sources":["../src/utils.js"],"names":["isBrowser","window","process","isNode","isFunction","o","params2queryString","params","Object","entries","map","k","v","encodeURIComponent","join","parts","i","l","arguments","length","concat","split","newParts","part","pop","push","unshift","dirname","path"],"mappings":";;;;;;;;;;;;;;AAAO,IAAMA,SAAS,GAAG,SAAZA,SAAY,GAAM;AAC7B,SAAO,OAAOC,MAAP,KAAkB,WAAlB,IAAiC,CAACA,MAAM,CAACC,OAAhD;AACD,CAFM;;;;AAIA,IAAMC,MAAM,GAAG,SAATA,MAAS,GAAM;AAC1B,SAAO,CAACH,SAAS,EAAV,IAAgB,OAAOE,OAAP,KAAmB,WAA1C;AACD,CAFM;;;;AAIA,SAASE,UAAT,CAAoBC,CAApB,EAAuB;AAC5B,SAAO,OAAOA,CAAP,KAAa,UAApB;AACD;;AAEM,IAAMC,kBAAkB,GAAG,SAArBA,kBAAqB,CAAAC,MAAM;AAAA,SACtCC,MAAM,CAACC,OAAP,CAAeF,MAAf,EACGG,GADH,CACO;AAAA;AAAA,QAAEC,CAAF;AAAA,QAAKC,CAAL;;AAAA,qBAAeC,kBAAkB,CAACF,CAAD,CAAjC,cAAwCE,kBAAkB,CAACD,CAAD,CAA1D;AAAA,GADP,EAEGE,IAFH,CAEQ,GAFR,CADsC;AAAA,CAAjC,C,CAKP;AACA;AACA;;;;;AACO,IAAMA,IAAI,GAAG,SAAPA,IAAO;AAAC;AAAwB;AAC3C;AACA,MAAIC,KAAK,GAAG,EAAZ;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAR,EAAWC,CAAC,GAAGC,UAAS,CAACC,MAA9B,EAAsCH,CAAC,GAAGC,CAA1C,EAA6CD,CAAC,EAA9C,EAAkD;AAChDD,IAAAA,KAAK,GAAGA,KAAK,CAACK,MAAN,CAAaF,UAAS,CAACF,CAAD,CAAT,CAAaK,KAAb,CAAmB,GAAnB,CAAb,CAAR;AACD,GAL0C,CAM3C;;;AACA,MAAIC,QAAQ,GAAG,EAAf;;AACA,OAAKN,CAAC,GAAG,CAAJ,EAAOC,CAAC,GAAGF,KAAK,CAACI,MAAtB,EAA8BH,CAAC,GAAGC,CAAlC,EAAqCD,CAAC,EAAtC,EAA0C;AACxC,QAAIO,IAAI,GAAGR,KAAK,CAACC,CAAD,CAAhB,CADwC,CAExC;AACA;;AACA,QAAI,CAACO,IAAD,IAASA,IAAI,KAAK,GAAtB,EAA2B,SAJa,CAKxC;;AACA,QAAIA,IAAI,KAAK,IAAb,EAAmBD,QAAQ,CAACE,GAAT,GAAnB,CACA;AADA,SAEKF,QAAQ,CAACG,IAAT,CAAcF,IAAd;AACN,GAjB0C,CAkB3C;;;AACA,MAAIR,KAAK,CAAC,CAAD,CAAL,KAAa,EAAjB,EAAqBO,QAAQ,CAACI,OAAT,CAAiB,EAAjB,EAnBsB,CAoB3C;;AACA,SAAOJ,QAAQ,CAACR,IAAT,CAAc,GAAd,MAAuBQ,QAAQ,CAACH,MAAT,GAAkB,GAAlB,GAAwB,GAA/C,CAAP;AACD,CAtBM,C,CAwBP;AACA;;;;;AACO,IAAMQ,OAAO,GAAG,SAAVA,OAAU,CAAAC,IAAI;AAAA,SAAId,IAAI,CAACc,IAAD,EAAO,IAAP,CAAR;AAAA,CAApB","sourcesContent":["export const isBrowser = () => {\n  return typeof window !== 'undefined' && !window.process\n}\n\nexport const isNode = () => {\n  return !isBrowser() && typeof process !== 'undefined'\n}\n\nexport function isFunction(o) {\n  return typeof o === 'function'\n}\n\nexport const params2queryString = params =>\n  Object.entries(params)\n    .map(([k, v]) => `${encodeURIComponent(k)}=${encodeURIComponent(v)}`)\n    .join('&')\n\n// Joins path segments.  Preserves initial \"/\" and resolves \"..\" and \".\"\n// Does not support using \"..\" to go above/outside the root.\n// This means that join(\"foo\", \"../../bar\") will not resolve to \"../bar\"\nexport const join = (/* path segments */) => {\n  // Split the inputs into a list of path commands.\n  var parts = []\n  for (var i = 0, l = arguments.length; i < l; i++) {\n    parts = parts.concat(arguments[i].split('/'))\n  }\n  // Interpret the path commands to get the new resolved path.\n  var newParts = []\n  for (i = 0, l = parts.length; i < l; i++) {\n    var part = parts[i]\n    // Remove leading and trailing slashes\n    // Also remove \".\" segments\n    if (!part || part === '.') continue\n    // Interpret \"..\" to pop the last segment\n    if (part === '..') newParts.pop()\n    // Push new path segments.\n    else newParts.push(part)\n  }\n  // Preserve the initial slash if there was one.\n  if (parts[0] === '') newParts.unshift('')\n  // Turn back into a single string path.\n  return newParts.join('/') || (newParts.length ? '/' : '.')\n}\n\n// A simple function to get the dirname of a path\n// Trailing slashes are ignored. Leading slash is preserved.\nexport const dirname = path => join(path, '..')\n"],"file":"utils.js"}