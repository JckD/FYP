"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.HubtypeService = void 0;

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _pusherJs = _interopRequireDefault(require("pusher-js"));

var _axios = _interopRequireDefault(require("axios"));

var PUSHER_KEY = process.env.WEBCHAT_PUSHER_KEY || '434ca667c8e6cb3f641c';
var HUBTYPE_API_URL = process.env.HUBTYPE_API_URL || 'https://api.hubtype.com';

var HubtypeService =
/*#__PURE__*/
function () {
  function HubtypeService(_ref) {
    var appId = _ref.appId,
        user = _ref.user,
        lastMessageId = _ref.lastMessageId,
        onEvent = _ref.onEvent;
    (0, _classCallCheck2["default"])(this, HubtypeService);
    this.appId = appId;
    this.user = user || {};
    this.lastMessageId = lastMessageId;
    this.onEvent = onEvent;
    if (user.id && lastMessageId) this.init();
  }

  (0, _createClass2["default"])(HubtypeService, [{
    key: "init",
    value: function init(user, lastMessageId) {
      var _this = this;

      if (user) this.user = user;
      if (lastMessageId) this.lastMessageId = lastMessageId;
      if (this.pusher || !this.user.id || !this.appId) return;
      this.pusher = new _pusherJs["default"](PUSHER_KEY, {
        cluster: 'eu',
        authEndpoint: "".concat(HUBTYPE_API_URL, "/v1/provider_accounts/webhooks/webchat/").concat(this.appId, "/auth/"),
        forceTLS: true,
        auth: {
          headers: {
            'X-BOTONIC-USER-ID': this.user.id,
            'X-BOTONIC-LAST-MESSAGE-ID': this.lastMessageId
          }
        }
      });
      this.channel = this.pusher.subscribe(this.pusherChannel);
      var connectionPromise = new Promise(function (resolve, reject) {
        var cleanAndReject = function cleanAndReject(msg) {
          clearTimeout(connectTimeout);

          _this.pusher.connection.unbind();

          _this.channel.unbind();

          reject(msg);
        };

        var connectTimeout = setTimeout(function () {
          return cleanAndReject('Connection Timeout');
        }, 10000);

        _this.channel.bind('pusher:subscription_succeeded', function () {
          clearTimeout(connectTimeout);
          resolve();
        });

        _this.pusher.connection.bind('error', function (error) {
          cleanAndReject("Pusher error (".concat(error.error.data.code || error.data.message, ")"));
        });
      });
      this.channel.bind('botonic_response', function (data) {
        return _this.onPusherEvent(data);
      });
      return connectionPromise;
    }
  }, {
    key: "onPusherEvent",
    value: function onPusherEvent(event) {
      if (this.onEvent && typeof this.onEvent === 'function') this.onEvent(event);
    }
  }, {
    key: "postMessage",
    value: function () {
      var _postMessage = (0, _asyncToGenerator2["default"])(
      /*#__PURE__*/
      _regenerator["default"].mark(function _callee(user, message) {
        return _regenerator["default"].wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.prev = 0;
                _context.next = 3;
                return this.init(user);

              case 3:
                _context.next = 9;
                break;

              case 5:
                _context.prev = 5;
                _context.t0 = _context["catch"](0);
                this.onEvent({
                  isError: true,
                  errorMessage: String(_context.t0)
                });
                return _context.abrupt("return");

              case 9:
                return _context.abrupt("return", _axios["default"].post("".concat(HUBTYPE_API_URL, "/v1/provider_accounts/webhooks/webchat/").concat(this.appId, "/"), {
                  sender: this.user,
                  message: message
                }));

              case 10:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this, [[0, 5]]);
      }));

      function postMessage(_x, _x2) {
        return _postMessage.apply(this, arguments);
      }

      return postMessage;
    }()
  }, {
    key: "pusherChannel",
    get: function get() {
      return "private-encrypted-".concat(this.appId, "-").concat(this.user.id);
    }
  }]);
  return HubtypeService;
}();

exports.HubtypeService = HubtypeService;
//# sourceMappingURL=hubtype-service.js.map