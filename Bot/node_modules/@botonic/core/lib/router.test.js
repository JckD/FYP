var _require = require('./router'),
    Router = _require.Router;

var textInput = {
  type: 'text',
  data: 'hi'
};
var textInputComplex = {
  type: 'text',
  data: 'CÃ¶mplÃªx input &% ðŸš€'
};
var textPayloadInput = {
  type: 'text',
  data: 'hi',
  payload: 'foo'
};
var postbackInput = {
  type: 'postback',
  payload: 'foo'
};
describe('Bad router initialization', function () {
  test('empty routes throw TypeError', function () {
    var router = new Router([]);
    expect(function () {
      return router.processInput(textInput);
    }).toThrow(TypeError);
  });
  test('null routes throw TypeError', function () {
    var router = new Router();
    expect(function () {
      return router.processInput(textInput);
    }).toThrow(TypeError);
  });
});
test('Router returns 404', function () {
  var router = new Router([{
    path: '404',
    action: '404Action'
  }]);

  var _router$processInput = router.processInput(textInput),
      action = _router$processInput.action;

  expect(action).toBe('404Action');
});
describe('Match route by MATCHER <> INPUT', function () {
  var router = new Router();
  test('text <> text', function () {
    expect(router.matchRoute('text', 'hi', textInput)).toBeTruthy();
    expect(router.matchRoute('text', 'hii', textInput)).toBeFalsy();
    expect(router.matchRoute('text', 'bye', textInput)).toBeFalsy();
    expect(router.matchRoute('text', '', textInput)).toBeFalsy();
    expect(router.matchRoute('text', null, textInput)).toBeFalsy();
    expect(router.matchRoute('text', 'CÃ¶mplÃªx input &% ðŸš€', textInputComplex)).toBeTruthy();
    expect(router.matchRoute('text', ' CÃ¶mplÃªx input &% ðŸš€', textInputComplex)).toBeFalsy(); // has a space at the beginning
  });
  test('regex <> text', function () {
    expect(router.matchRoute('text', /hi/, textInput)).toBeTruthy();
    expect(router.matchRoute('text', /bye/, textInput)).toBeFalsy();
    expect(router.matchRoute('text', /ðŸš€/, textInputComplex)).toBeTruthy();
    expect(router.matchRoute('text', /complex/, textInputComplex)).toBeFalsy();
  });
  test('function <> text', function () {
    expect(router.matchRoute('text', function (v) {
      return v.startsWith('hi');
    }, textInput)).toBeTruthy();
    expect(router.matchRoute('text', function (v) {
      return !v.startsWith('hi');
    }, textInput)).toBeFalsy();
  });
  test('input <> text', function () {
    expect(router.matchRoute('input', function (i) {
      return i.data.startsWith('hi');
    }, textInput)).toBeTruthy();
    expect(router.matchRoute('input', function (i) {
      return !i.data.startsWith('hi');
    }, textInput)).toBeFalsy();
  });
  test('text <> text payload', function () {
    expect(router.matchRoute('payload', 'foo', textPayloadInput)).toBeTruthy();
    expect(router.matchRoute('payload', 'fooo', textPayloadInput)).toBeFalsy();
    expect(router.matchRoute('payload', 'bar', textPayloadInput)).toBeFalsy();
    expect(router.matchRoute('payload', '', textPayloadInput)).toBeFalsy();
    expect(router.matchRoute('payload', null, textPayloadInput)).toBeFalsy();
  });
  test('regex <> text payload', function () {
    expect(router.matchRoute('payload', /foo/, textPayloadInput)).toBeTruthy();
    expect(router.matchRoute('payload', /bar/, textPayloadInput)).toBeFalsy();
  });
  test('function <> text payload', function () {
    expect(router.matchRoute('payload', function (v) {
      return v.startsWith('fo');
    }, textPayloadInput)).toBeTruthy();
    expect(router.matchRoute('payload', function (v) {
      return !v.startsWith('fo');
    }, textPayloadInput)).toBeFalsy();
  });
  test('text <> postback', function () {
    expect(router.matchRoute('payload', 'foo', postbackInput)).toBeTruthy();
    expect(router.matchRoute('payload', 'fooo', postbackInput)).toBeFalsy();
    expect(router.matchRoute('payload', 'bar', postbackInput)).toBeFalsy();
    expect(router.matchRoute('payload', '', postbackInput)).toBeFalsy();
    expect(router.matchRoute('payload', null, postbackInput)).toBeFalsy();
  });
  test('regex <> postback', function () {
    expect(router.matchRoute('payload', /foo/, postbackInput)).toBeTruthy();
    expect(router.matchRoute('payload', /bar/, postbackInput)).toBeFalsy();
  });
  test('function <> postback', function () {
    expect(router.matchRoute('payload', function (v) {
      return v.startsWith('fo');
    }, postbackInput)).toBeTruthy();
    expect(router.matchRoute('payload', function (v) {
      return !v.startsWith('fo');
    }, postbackInput)).toBeFalsy();
  });
});
describe('Get route by path', function () {
  var externalRoutes = [{
    path: '',
    action: 'DefaultAction'
  }, {
    path: 'child',
    action: 'ChildAction'
  }];
  var router = new Router([{
    path: 'initial',
    action: 'Initial'
  }, {
    path: 'flow-1',
    action: 'Flow1',
    childRoutes: [{
      path: '1',
      action: 'Flow1.1',
      childRoutes: [{
        path: '1',
        action: 'Flow1.1.1'
      }, {
        path: '2',
        action: 'Flow1.1.2'
      }, {
        path: '3',
        action: 'Flow1.1.3'
      }]
    }, {
      path: '2',
      action: 'Flow1.2',
      childRoutes: externalRoutes
    }, {
      path: '3',
      action: 'Flow1.3',
      childRoutes: [{
        path: '1',
        action: 'Flow1.3.1'
      }, {
        path: '2',
        action: 'Flow1.3.2'
      }, {
        path: '3',
        action: 'Flow1.3.3'
      }]
    }]
  }, {
    path: '404',
    action: '404Action'
  }]);
  test('path exists', function () {
    expect(router.getRouteByPath('initial').action).toBe('Initial');
    expect(router.getRouteByPath('flow-1/1').action).toBe('Flow1.1');
    expect(router.getRouteByPath('flow-1/3/2').action).toBe('Flow1.3.2');
  });
  test('path exists in composed child routes', function () {
    expect(router.getRouteByPath('flow-1/2').action).toBe('Flow1.2');
    expect(router.getRouteByPath('flow-1/2/child').action).toBe('ChildAction');
  });
  test('path does not exist', function () {
    expect(router.getRouteByPath('')).toBeNull();
    expect(router.getRouteByPath('foo')).toBeNull();
    expect(router.getRouteByPath('flow-1/3/2/6')).toBeNull();
  });
});
describe('Process input (v<0.9)', function () {
  var externalRoutes = [{
    path: '',
    action: 'DefaultAction'
  }, {
    path: 'child',
    action: 'ChildAction'
  }];
  var router = new Router([{
    path: 'help',
    payload: 'help',
    action: 'Help'
  }, {
    path: 'initial',
    intent: /greeting/,
    action: 'Flow1',
    childRoutes: [{
      path: '1',
      payload: '1',
      action: 'Flow1.1',
      childRoutes: [{
        path: '1',
        payload: '1',
        action: 'Flow1.1.1'
      }, {
        path: '2',
        payload: '2',
        action: 'Flow1.1.2'
      }, {
        path: '3',
        payload: '3',
        action: 'Flow1.1.3'
      }]
    }, {
      path: '2',
      payload: '2',
      action: 'Flow1.2',
      childRoutes: externalRoutes
    }, {
      path: '3',
      payload: '3',
      action: 'Flow1.3',
      childRoutes: [{
        path: '1',
        payload: '1',
        action: 'Flow1.3.1'
      }, {
        path: '2',
        payload: '2',
        action: 'Flow1.3.2'
      }, {
        path: '3',
        payload: '3',
        action: 'Flow1.3.3'
      }]
    }]
  }, {
    path: '404',
    action: '404Action'
  }]);
  test('text input, root level route', function () {
    var input = {
      type: 'text',
      data: 'hi',
      intent: 'greeting'
    };
    var session = {};
    var lastRoutePath = null;
    expect(router.processInput(input, session, lastRoutePath).action).toBe('Flow1');
  });
  test('payload input, 2nd level route', function () {
    var input = {
      type: 'postback',
      payload: '2'
    };
    var session = {};
    var lastRoutePath = 'initial';
    expect(router.processInput(input, session, lastRoutePath).action).toBe('Flow1.2');
  });
  test('path payload input, root level route (should be ignored)', function () {
    var input = {
      type: 'postback',
      payload: '__PATH_PAYLOAD__initial/2'
    };
    var session = {};
    var lastRoutePath = '';
    expect(router.processInput(input, session, lastRoutePath).action).toBe('Flow1.2');
  });
  test('path payload input, 2nd level route (should be ignored)', function () {
    var input = {
      type: 'postback',
      payload: '__PATH_PAYLOAD__initial/2'
    };
    var session = {};
    var lastRoutePath = 'initial';
    expect(router.processInput(input, session, lastRoutePath).action).toBe('Flow1.2');
  });
});
//# sourceMappingURL=router.test.js.map