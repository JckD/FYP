(function (global, factory) {
  if (typeof define === "function" && define.amd) {
    define(["exports", "@babel/runtime/regenerator", "@babel/runtime/helpers/asyncToGenerator", "@babel/runtime/helpers/slicedToArray", "@babel/runtime/helpers/defineProperty", "@babel/runtime/helpers/objectWithoutProperties", "fs", "path", "axios", "colors", "./preprocessing", "./constants"], factory);
  } else if (typeof exports !== "undefined") {
    factory(exports, require("@babel/runtime/regenerator"), require("@babel/runtime/helpers/asyncToGenerator"), require("@babel/runtime/helpers/slicedToArray"), require("@babel/runtime/helpers/defineProperty"), require("@babel/runtime/helpers/objectWithoutProperties"), require("fs"), require("path"), require("axios"), require("colors"), require("./preprocessing"), require("./constants"));
  } else {
    var mod = {
      exports: {}
    };
    factory(mod.exports, global.regenerator, global.asyncToGenerator, global.slicedToArray, global.defineProperty, global.objectWithoutProperties, global.fs, global.path, global.axios, global.colors, global.preprocessing, global.constants);
    global.fileUtils = mod.exports;
  }
})(this, function (_exports, _regenerator, _asyncToGenerator2, _slicedToArray2, _defineProperty2, _objectWithoutProperties2, _fs, _path, _axios, _colors, _preprocessing, _constants) {
  "use strict";

  var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.readDir = readDir;
  _exports.readFile = readFile;
  _exports.readJSON = readJSON;
  _exports.writeJSON = writeJSON;
  _exports.createDir = createDir;
  _exports.pathExists = pathExists;
  _exports.appendNewLine = appendNewLine;
  _exports.getIntentName = getIntentName;
  _exports.loadConfigAndTrainingData = loadConfigAndTrainingData;
  _exports.saveConfigAndTrainingData = saveConfigAndTrainingData;
  _exports.downloadFileToDisk = downloadFileToDisk;
  _regenerator = _interopRequireDefault(_regenerator);
  _asyncToGenerator2 = _interopRequireDefault(_asyncToGenerator2);
  _slicedToArray2 = _interopRequireDefault(_slicedToArray2);
  _defineProperty2 = _interopRequireDefault(_defineProperty2);
  _objectWithoutProperties2 = _interopRequireDefault(_objectWithoutProperties2);
  _fs = _interopRequireDefault(_fs);
  _path = _interopRequireDefault(_path);
  _axios = _interopRequireDefault(_axios);
  _colors = _interopRequireDefault(_colors);

  function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { (0, _defineProperty2["default"])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

  var FILE_OPEN_EXCEPTION = function FILE_OPEN_EXCEPTION(error) {
    return _colors["default"].red("".concat(error));
  };

  var CONFIG_NOT_FOUND_EXCEPTION = function CONFIG_NOT_FOUND_EXCEPTION(flagLang) {
    return _colors["default"].red("No configuration found for '".concat(flagLang, "' in ").concat(_constants.NLU_CONFIG_FILENAME, "."));
  };

  function readDir(dirPath) {
    try {
      return _fs["default"].readdirSync(dirPath).filter(function (dirName) {
        return dirName !== '.DS_Store';
      });
    } catch (e) {
      throw FILE_OPEN_EXCEPTION(e);
    }
  }

  function readFile(filePath) {
    var fileEncoding = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'utf-8';

    try {
      return _fs["default"].readFileSync(filePath, fileEncoding);
    } catch (e) {
      throw FILE_OPEN_EXCEPTION(e);
    }
  }

  function readJSON(jsonPath) {
    return JSON.parse(readFile(jsonPath));
  }

  function writeJSON(jsonPath, object) {
    _fs["default"].writeFileSync(jsonPath, JSON.stringify(object, null, 2));
  }

  function createDir(path) {
    _fs["default"].mkdirSync(path);
  }

  function pathExists(path) {
    return _fs["default"].existsSync(path);
  }

  function appendNewLine(path, str) {
    _fs["default"].appendFileSync(path, "\n".concat(str));
  }

  function getIntentName(fileName) {
    try {
      return fileName.match(/(.*).txt/)[1];
    } catch (e) {
      console.log("".concat(fileName, " is not a valid. File must be of type IntentName.txt"));
    }
  }

  function loadConfigAndTrainingData(nluPath, languages) {
    var nluConfig = readJSON(_path["default"].join(nluPath, _constants.NLU_CONFIG_FILENAME));
    var _nluConfig$params = nluConfig.params,
        defaultConfig = _nluConfig$params["default"],
        langsConfig = (0, _objectWithoutProperties2["default"])(_nluConfig$params, ["default"]);
    return nluConfig.langs.filter(function (l) {
      return languages ? languages.includes(l) : true;
    }).map(function (language) {
      var utterancesDir = _path["default"].join(nluPath, _constants.UTTERANCES_DIRNAME, language);

      var modelsPath = _path["default"].join(nluPath, _constants.MODELS_DIRNAME, language);

      var utterancesFiles = readDir(utterancesDir);
      var devIntents = {
        intentsDict: {},
        intents: []
      };
      var devEntities = {
        words: {},
        tags: {},
        tagList: []
      };
      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = undefined;

      try {
        for (var _iterator = utterancesFiles.entries()[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          var _step$value = (0, _slicedToArray2["default"])(_step.value, 2),
              idx = _step$value[0],
              file = _step$value[1];

          devIntents.intentsDict[idx] = getIntentName(file);
          var utterances = readFile(_path["default"].join(utterancesDir, file)).split('\n');
          var _iteratorNormalCompletion2 = true;
          var _didIteratorError2 = false;
          var _iteratorError2 = undefined;

          try {
            for (var _iterator2 = utterances[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
              var utterance = _step2.value;

              var _parseUtterance = (0, _preprocessing.parseUtterance)(utterance),
                  parsedUtterance = _parseUtterance.parsedUtterance,
                  parsedEntities = _parseUtterance.parsedEntities;

              devIntents.intents.push({
                rawUtterance: utterance,
                utterance: parsedUtterance,
                label: idx
              });
              var _iteratorNormalCompletion3 = true;
              var _didIteratorError3 = false;
              var _iteratorError3 = undefined;

              try {
                for (var _iterator3 = parsedEntities[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
                  var entity = _step3.value;
                  var type = entity.type,
                      value = entity.value;
                  devEntities.words[value] = type;
                  devEntities.tags[type] = {
                    isA: type
                  };

                  if (!devEntities.tagList.includes(type)) {
                    devEntities.tagList.push(type);
                  }
                }
              } catch (err) {
                _didIteratorError3 = true;
                _iteratorError3 = err;
              } finally {
                try {
                  if (!_iteratorNormalCompletion3 && _iterator3["return"] != null) {
                    _iterator3["return"]();
                  }
                } finally {
                  if (_didIteratorError3) {
                    throw _iteratorError3;
                  }
                }
              }
            }
          } catch (err) {
            _didIteratorError2 = true;
            _iteratorError2 = err;
          } finally {
            try {
              if (!_iteratorNormalCompletion2 && _iterator2["return"] != null) {
                _iterator2["return"]();
              }
            } finally {
              if (_didIteratorError2) {
                throw _iteratorError2;
              }
            }
          }
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator["return"] != null) {
            _iterator["return"]();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }

      return _objectSpread({}, defaultConfig, {}, langsConfig[language] || {}, {
        utterancesDir: utterancesDir,
        modelsPath: modelsPath,
        devIntents: devIntents,
        devEntities: devEntities,
        language: language
      });
    });
  }

  function saveConfigAndTrainingData(_x) {
    return _saveConfigAndTrainingData.apply(this, arguments);
  }

  function _saveConfigAndTrainingData() {
    _saveConfigAndTrainingData = (0, _asyncToGenerator2["default"])(
    /*#__PURE__*/
    _regenerator["default"].mark(function _callee(_ref) {
      var modelsPath, model, language, nluData, resultsPath;
      return _regenerator["default"].wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              modelsPath = _ref.modelsPath, model = _ref.model, language = _ref.language, nluData = _ref.nluData;
              resultsPath = _path["default"].join(modelsPath, language);

              if (!pathExists(modelsPath)) {
                createDir(modelsPath);
              }

              if (!pathExists(resultsPath)) {
                createDir(resultsPath);
              }

              console.log('Saving model...');
              _context.next = 7;
              return model.save("file://".concat(resultsPath));

            case 7:
              console.log('Saving intents and entities...');
              console.log('Saving word index...');
              writeJSON("".concat(resultsPath, "/").concat(_constants.NLU_DATA_FILENAME), nluData);
              console.log('\n');

            case 11:
            case "end":
              return _context.stop();
          }
        }
      }, _callee);
    }));
    return _saveConfigAndTrainingData.apply(this, arguments);
  }

  function downloadFileToDisk(_x2) {
    return _downloadFileToDisk.apply(this, arguments);
  }

  function _downloadFileToDisk() {
    _downloadFileToDisk = (0, _asyncToGenerator2["default"])(
    /*#__PURE__*/
    _regenerator["default"].mark(function _callee2(_ref2) {
      var url, downloadPath, fileWriter, downloadedFile;
      return _regenerator["default"].wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              url = _ref2.url, downloadPath = _ref2.downloadPath;
              _context2.prev = 1;
              fileWriter = _fs["default"].createWriteStream(downloadPath);
              _context2.next = 5;
              return _axios["default"].get(url, {
                responseType: 'stream'
              });

            case 5:
              downloadedFile = _context2.sent;
              downloadedFile.data.pipe(fileWriter);
              return _context2.abrupt("return", new Promise(function (resolve, reject) {
                fileWriter.on('finish', resolve);
                fileWriter.on('error', reject);
              }));

            case 10:
              _context2.prev = 10;
              _context2.t0 = _context2["catch"](1);
              console.log(_colors["default"].red("Error downloading the file."));
              console.log(_colors["default"].red("".concat(_context2.t0.response.status, ": ").concat(_context2.t0.response.statusText)));

            case 14:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2, null, [[1, 10]]);
    }));
    return _downloadFileToDisk.apply(this, arguments);
  }
});